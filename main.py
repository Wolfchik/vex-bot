# coding=UTF-8
import disnake
import os
import asyncio
import random
import requests
import io
import json
import datetime
import calendar
import time
import chat
import sqlite3
from fuzzywuzzy import fuzz
from memory import Memory
from disnake.ext import commands
from disnake.utils import get
from PIL import Image, ImageFont, ImageDraw
import googletrans
import string
import flask
import aiohttp
from gtts import gTTS
from akinator import (
    CantGoBackAnyFurther,
    InvalidAnswer,
    Akinator,
    Answer,
    Theme,
)
from yandex_music.client import Client
from yandex_music.utils.request import Request
from yandex_music.exceptions import NetworkError
from boticordpy import BoticordClient
from flask import Flask, render_template, session, redirect, url_for
from threading import Thread
from bs4 import BeautifulSoup as BS
from fake_useragent import UserAgent
client = None
request = Request(proxy_url='http://–ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å@195.245.103.194:62986')
client = Client("—Ç–æ–∫–µ–Ω —è–Ω–¥–µ–∫—Å –º—É–∑—ã–∫–∏", request=request).init()
print("yandex_music: Success Connect")
translator = googletrans.Translator()
bot = commands.Bot(command_prefix="?", intents=disnake.Intents.all(), sync_commands_debug=True)

def lang(ctx, text):
    return text

lists = []

class searchError(Exception):
    pass

class VoiceStateError(Exception):
    pass

class Song(disnake.PCMVolumeTransformer):

    def __init__(self):
        self._source = "Yandex Music"

    def search_tracks(self, ctx, query):
        stats = True
        while stats:
            try:
                searcher = client.search(str(query))
                if not searcher.tracks: raise searchError("Not searched tracks")
                track_object = searcher.tracks['results'][0]
                stats = False
                text = None
                lyrics = track_object.get_supplement()
                if lyrics.lyrics: text = lyrics.lyrics.full_lyrics
                with sqlite3.connect("database.db") as db:
                    cursor = db.cursor()
                    cursor.execute("INSERT INTO songs(name, requester, author, id, albumid, lyrics, guild, image) VALUES(?, ?, ?, ?, ?, ?, ?, ?)", (track_object['title'],ctx.author.id,track_object['artists'][0]['name'],track_object['id'],track_object['albums'][0]["id"],text,ctx.guild.id,"https://" + track_object["og_image"].replace("%%", "1000x1000"),))
                return {
                "id": track_object["id"],
                "title": track_object["title"],
                "artist": track_object["artists"][0]["name"],
                "albumid": track_object["albums"][0]["id"],
                "lyrics": text,
                "image": "https://" + track_object["og_image"].replace("%%", "1000x1000")
                }
            except NetworkError:
                pass
    async def download_track(self, ctx, track):
        stats = True
        while stats:
            try:
                client.tracks(track['id'])[0].download(f"songs/{track['id']}.mp3")
                stats = False
            except NetworkError:
                pass


    async def join_channel(self, ctx):
        voice = ctx.author.voice
        if not voice: return "notChannel"
        if voice:
            await voice.channel.connect()
            for mem in voice.channel.members:
                if mem.id == 1047125592220373075:
                    try:
                        await mem.edit(deafen=True)
                    except:
                        pass
            return None

    async def leave_channel(self, ctx):
        voice_state = ctx.guild.voice_client
        if not voice_state:
            return "notState"
        if voice_state.is_connected():
            await voice_state.disconnect()
            return None
        else:
            return "notState"

    async def stop(self, ctx):
        voice_state = ctx.guild.voice_client
        if not voice_state:
            return "notState"
        if voice_state.is_connected():
            await Song.leave_channel(self, ctx)
            return None
        else:
            return "notState"

    async def my_after(self, ctx):
        #os.remove(f"songs/{ctx.guild.id}.mp3")
        if not ctx.guild:
            return
        voice_state = ctx.guild.voice_client
        names = []
        requesters = []
        artists = []
        ids = []
        albumids = []
        positions = []
        guilds = []
        lyrics = []
        with sqlite3.connect("database.db") as db:
            c = db.cursor()
            for n, r, a, i, ai, ly, g, im, p in c.execute("SELECT * FROM songs WHERE guild = ?", (ctx.guild.id,)):
                positions.append(p)
                names.append(n)
                requesters.append(r)
                artists.append(a)
                guilds.append(g)
                ids.append(i)
                albumids.append(ai)
                if n and not ly:
                    lyrics.append(None)
                else:
                    lyrics.append(ly)
            c.execute("DELETE FROM songs WHERE guild = ? AND position = ?", (guilds[0], positions[0],))
        if os.path.isfile("songs/{}.mp3".format(ids[0])):
            os.remove("songs/{}.mp3".format(ids[0]))
        if os.path.isfile(f"msgs/{ctx.guild.id}.txt"):
            with open(f"msgs/{ctx.guild.id}.txt", "r") as file:
                await bot.get_message(int(file.read())).delete()
        if voice_state and voice_state.is_connected():
            try:
                positions[1]
            except:
                pass
            else:
                await Song.play(self, ctx)

    def init_after(self, ctx):
        asyncio.run_coroutine_threadsafe(Song.my_after(self, ctx), bot.loop)

    async def play(self, ctx):
        voice_state = ctx.guild.voice_client
        if not voice_state:
            error = await Song.join_channel(self, ctx)
            if error:
                return error
        voice_state = ctx.guild.voice_client
        if voice_state.is_playing():
            return "alreadyPlay"
        ids = []
        names = []
        requesters = []
        alis = []
        authors = []
        positions = []
        imgs = []
        with sqlite3.connect("database.db") as db:
            c = db.cursor()
            for n, r, a, i, ai, ly, g, im, p in c.execute("SELECT * FROM songs WHERE guild = ?", (ctx.guild.id,)):
                ids.append(i)
                names.append(n)
                requesters.append(r)
                alis.append(ai)
                authors.append(a)
                positions.append(p)
                imgs.append(im)
        if not os.path.isfile(f"songs/{ids[0]}.mp3"):
            await Song.download_track(self, ctx, {'id': ids[0]})
        voice_state.play(disnake.FFmpegPCMAudio(f"songs/{ids[0]}.mp3"), after=lambda e: Song.init_after(self, ctx))
        voice_state.is_playing()
        infor = Song.now_playing(self, ctx.guild)
        embed = disnake.Embed(title=infor['name'],color=0x228b22)
        embed.add_field(name=lang(ctx,"–ì–ª–∞–≤–Ω—ã–π –∞–≤—Ç–æ—Ä:"),value=infor['artist'])
        embed.add_field(name=lang(ctx,"–ü—Ä–µ–¥–ª–æ–∂–∏–ª:"),value=f"<@{infor['requester']}>")
        embed.add_field(name=lang(ctx,"–ò—Å—Ç–æ—á–Ω–∏–∫:"),value="<:yandexMusic:1056924402790436934> Yandex Music\n")
        embed.add_field(name=lang(ctx,"–°—Å—ã–ª–∫–∞:"),value=f"[**{lang(ctx,'–≠—Ç–æ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞!')}**]({infor['uri']})")
        embed.add_field(name=lang(ctx,"–ü–æ–∑–∏—Ü–∏—è:"),value=infor['pos'])
        embed.set_thumbnail(url=infor['image'])

        comps = [
        disnake.ui.Button(emoji="‚èπ", label="–°—Ç–æ–ø", style=disnake.ButtonStyle.danger, custom_id="stop"),
        disnake.ui.Button(emoji="‚èÆ", label="–†–µ–ø–ª–µ–π", style=disnake.ButtonStyle.blurple, custom_id="replay"),
        disnake.ui.Button(emoji="‚è∏", label="–ü–∞—É–∑–∞", style=disnake.ButtonStyle.blurple, custom_id="pause"),
        disnake.ui.Button(emoji="‚è≠", label="–°–∫–∏–ø", style=disnake.ButtonStyle.blurple, custom_id="next"),
        disnake.ui.Button(emoji="üì∞", label="–¢–µ–∫—Å—Ç", style=disnake.ButtonStyle.success, custom_id="text")
        ]

        msg = await ctx.channel.send(embed=embed, components=comps)
        with open(f"msgs/{msg.guild.id}.txt", "w") as file:
            file.write(str(msg.id))
        return None

    async def add_for_id(self, ctx, i):
        track_object = client.tracks([f"{i}"])[0]
        text = None
        lyrics = track_object.get_supplement()
        if lyrics.lyrics: text = lyrics.lyrics.full_lyrics
        with sqlite3.connect("database.db") as db:
            cursor = db.cursor()
            cursor.execute("INSERT INTO songs(name, requester, author, id, albumid, lyrics, guild, image) VALUES(?, ?, ?, ?, ?, ?, ?, ?)", (track_object['title'],ctx.author.id,track_object['artists'][0]['name'],track_object['id'],track_object['albums'][0]["id"],text,ctx.guild.id,"https://" + track_object["og_image"].replace("%%", "1000x1000"),))


    async def skip(self, ctx):
        voice_state = ctx.guild.voice_client
        if voice_state and voice_state.is_playing():
            try:
                await voice_state.stop()
            except:
                pass
            return None
        else:
            return "notState"

    def lyrics(self, ctx):
        names = []
        requesters = []
        artists = []
        ids = []
        albumids = []
        lyrics = []
        with sqlite3.connect("database.db") as db:
            c = db.cursor()
            for n, r, a, i, ai, ly, g, im, p in c.execute("SELECT * FROM songs WHERE guild = ?", (ctx.guild.id,)):
                names.append(n)
                requesters.append(r)
                artists.append(a)
                ids.append(i)
                albumids.append(ai)
                if n and not ly:
                    lyrics.append(None)
                else:
                    lyrics.append(ly)

        return {
        "name": names[0],
        "lyrics": lyrics[0]
        }

    def now_playing(self, guild):
        names = []
        requesters = []
        artists = []
        ids = []
        albumids = []
        positions = []
        imgs = []
        with sqlite3.connect("database.db") as db:
            c = db.cursor()
            for n, r, a, i, ai, ly, g, im, p in c.execute("SELECT * FROM songs WHERE guild = ?", (guild.id,)):
                names.append(n)
                requesters.append(r)
                artists.append(a)
                ids.append(i)
                albumids.append(ai)
                positions.append(p)
                imgs.append(im)
        return {
        "name": names[0],
        "requester": requesters[0],
        "artist": artists[0],
        "pos": positions[0],
        "uri": f"https://music.yandex.ru/album/{albumids[0]}/track/{ids[0]}",
        "image": imgs[0],
        "id": ids[0]
        }

    def construct_queue(self, guild):
        urls = []
        names = []
        positions = []
        texts = []
        with sqlite3.connect("database.db") as db:
            c = db.cursor()
            for n, r, a, i, ai, ly, g, im, p in c.execute("SELECT * FROM songs WHERE guild = ?", (guild.id,)):
                names.append(n)
                positions.append(p)
                urls.append(f"https:/music.yandex.ru/album/{ai}/track/{i}")
                texts.append(f"`{p}.` {a} - [**{n}**](https:/music.yandex.ru/album/{ai}/track/{i}) - <@{r}>")
        if texts == []: return None
        return "\n".join(list(map(str, texts)))

    def parse_queue(self, guild):
        urls = []
        names = []
        positions = []
        texts = []
        with sqlite3.connect("database.db") as db:
            c = db.cursor()
            for n, r, a, i, ai, ly, g, im, p in c.execute("SELECT * FROM songs WHERE guild = ?", (guild.id,)):
                names.append(n)
                positions.append(p)
                urls.append(f"https:/music.yandex.ru/album/{ai}/track/{i}")
                texts.append(f"{p}. {n}")
        return {
        "texts": texts,
        "urls": urls
        }


    def pause(self, ctx):
        voice_state = ctx.voice_client
        if voice_state.is_playing():
            voice_state.pause()

        else:
            raise VoiceStateError("don't playing!")

    def resume(self, ctx):
        voice_state = ctx.voice_client
        if not voice_state.is_playing():
            voice_state.resume()
        else:
            raise VoiceStateError("already Playing!")


    def get_rand_track(self, ctx):
        track = random.choice(client.users_likes_tracks()).fetch_track()
        return track

    async def replay(self, ctx):
        if os.path.isfile(f"msgs/{ctx.guild.id}.txt"):
            with open(f"msgs/{ctx.guild.id}.txt", "r") as file:
                await bot.get_message(int(file.read())).delete()
        Song.pause(self, ctx.guild)
        await Song.play(self, ctx)

    async def import_album(self, ctx, album_id: int):
        album = client.albums_with_tracks(album_id)
        tracks = []
        count = 0
        for i, volume in enumerate(album.volumes):
            tracks += volume
        for track in tracks:
            #print(track)
            await Song.add_for_id(self, ctx, track["id"])
            count += 1
        return count


class Music(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.song = Song()

    @commands.slash_command(name="join",description="–ü–æ–¥–∫–ª—é—á–∞–µ—Ç –±–æ—Ç–∞ –∫ –≤–∞—à–µ–º—É –∫–∞–Ω–∞–ª—É")
    async def _join(self, ctx):
        await ctx.response.defer()
        error = await self.song.join_channel(ctx)
        if error:
            if error == "notChannel": return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx,'–û—à–∏–±–∫–∞')}",description=lang(ctx,"–î–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª"),color=disnake.Color.red()), delete_after = 10)

        await ctx.send(embed=disnake.Embed(title=f"<:correctCheckmark:1047244074350018700> {lang(ctx,'–£—Å–ø–µ—à–Ω–æ')}",color=0x228b22))

    @commands.command(name="join", usage="?join")
    async def _join_(self, ctx):
        error = await self.song.join_channel(ctx)
        if error:
            if error == "notChannel": return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx,'–û—à–∏–±–∫–∞')}",description=lang(ctx,"–î–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª"),color=disnake.Color.red()), delete_after = 10)

        await ctx.send(embed=disnake.Embed(title=f"<:correctCheckmark:1047244074350018700> {lang(ctx,'–£—Å–ø–µ—à–Ω–æ')}",color=0x228b22))

    @commands.slash_command(name="stop",description="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ(–≤–Ω–∏–º–∞–Ω–∏–µ, –æ—á–µ—Ä–µ–¥—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.)")
    async def _stop(self, ctx):
        await ctx.response.defer()
        error = await self.song.stop(ctx)
        if error:
            if error == "notState": return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx,'–û—à–∏–±–∫–∞')}",description=lang(ctx,"–Ø —É–∂–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω."),color=disnake.Color.red()), delete_after = 10)

        await ctx.send(embed=disnake.Embed(title=f"<:correctCheckmark:1047244074350018700> {lang(ctx,'–£—Å–ø–µ—à–Ω–æ')}",description=lang(ctx,"–ü–æ–∫–∞-–ø–æ–∫–∞!"),color=0x228b22))

    @commands.command(name="stop", usage="?stop")
    async def _stop_(self, ctx):
        error = await self.song.stop(ctx)
        if error:
            if error == "notState": return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx,'–û—à–∏–±–∫–∞')}",description=lang(ctx,"–Ø —É–∂–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω."),color=disnake.Color.red()), delete_after = 10)

        await ctx.send(embed=disnake.Embed(title=f"<:correctCheckmark:1047244074350018700> {lang(ctx,'–£—Å–ø–µ—à–Ω–æ')}",description=lang(ctx,"–ü–æ–∫–∞-–ø–æ–∫–∞!"),color=0x228b22))

    @commands.slash_command(name="play",description="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫")
    async def _play(self, ctx, –Ω–∞–∑–≤–∞–Ω–∏–µ: str = None):
        await ctx.response.defer()
        name = –Ω–∞–∑–≤–∞–Ω–∏–µ
        voice_state = ctx.guild.voice_client
        if name:
            try:
                track = self.song.search_tracks(ctx, name)
            except searchError:
                return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx,'–û—à–∏–±–∫–∞')}",description=lang(ctx,"–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å :("),color=disnake.Color.red()), delete_after = 10)
        else:
            text = self.song.construct_queue(ctx.guild)
            if not text:
                return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx,'–û—à–∏–±–∫–∞')}",description=lang(ctx,"–û—á–µ—Ä–µ–¥—å –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ –ø—É—Å—Ç–∞, –ø–æ—ç—Ç–æ–º—É –¥–æ–±–∞–≤—å—Ç–µ —á—Ç–æ —Ç–æ –≤ –Ω–µ—ë!"),color=disnake.Color.red()), delete_after = 10)
        if voice_state:
            if voice_state.is_playing():
                pass
            else:
                error = await self.song.play(ctx)
        else:
            error = await self.song.play(ctx)
            if error:
                if error == "notChannel": return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx,'–û—à–∏–±–∫–∞')}",description=lang(ctx,"–ó–∞–π–¥–∏—Ç–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª."),color=disnake.Color.red()), delete_after = 10)
        if name:
            await ctx.send(f"{track['title']} {lang(ctx,'—É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å')}!")
        else:
            await ctx.send(f"**{self.bot.user.name}** —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞–ª –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏!")

    @commands.command(name="play", usage="?play <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –î–æ–±–∞–≤–∏—Ç—å\n?play - –í–∫–ª—é—á–∏—Ç—å –æ—á–µ—Ä–µ–¥—å")
    async def _play_(self, ctx, *, name: str = None):
        voice_state = ctx.guild.voice_client
        if name:
            try:
                track = self.song.search_tracks(ctx, name)
            except searchError:
                return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx,'–û—à–∏–±–∫–∞')}",description=lang(ctx,"–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å :("),color=disnake.Color.red()), delete_after = 10)
        else:
            text = self.song.construct_queue(ctx.guild)
            if not text:
                return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx,'–û—à–∏–±–∫–∞')}",description=lang(ctx,"–û—á–µ—Ä–µ–¥—å –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ –ø—É—Å—Ç–∞, –ø–æ—ç—Ç–æ–º—É –¥–æ–±–∞–≤—å—Ç–µ —á—Ç–æ —Ç–æ –≤ –Ω–µ—ë!"),color=disnake.Color.red()), delete_after = 10)
        if voice_state:
            if voice_state.is_playing():
                pass
            else:
                error = await self.song.play(ctx)
        else:
            error = await self.song.play(ctx)
            if error:
                if error == "notChannel": return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx,'–û—à–∏–±–∫–∞')}",description=lang(ctx,"–ó–∞–π–¥–∏—Ç–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª."),color=disnake.Color.red()), delete_after = 10)
        if name:
            await ctx.send(f"{track['title']} {lang(ctx,'—É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å')}!")
        else:
            await ctx.message.add_reaction("<:correctCheckmark:1047244074350018700>")

    @commands.slash_command(name="import-playlist", description="–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª—ç–π–ª–∏—Å—Ç –ø–æ ID")
    async def iq_(self, ctx, id: int):
        await ctx.response.defer()
        count = await self.song.import_album(ctx, id)
        if not count > 0:
            return await ctx.send("<:wrongCheckmark:1047244133078675607> –ö–∞–∂–µ—Ç—å—Å—è, –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç!")
        else:
            await ctx.send("<:correctCheckmark:1047244074350018700> –£—Å–ø–µ—à–Ω–æ, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∫–æ–º–∞–Ω–¥–æ–π `/play`")

    @commands.slash_command(name="skip",description="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–µ–∫")
    async def _skip(self, ctx):
        await ctx.response.defer()
        error = await self.song.skip(ctx)
        if error == "notState": return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx,'–û—à–∏–±–∫–∞')}",description=lang(ctx,"–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!"),color=disnake.Color.red()), delete_after = 10)
        await ctx.send(embed=disnake.Embed(title=f"<:correctCheckmark:1047244074350018700> {lang(ctx,'–£—Å–ø–µ—à–Ω–æ')}",color=0x228b22))

    @commands.command(name="skip", usage="?skip")
    async def _skip_(self, ctx):
        error = await self.song.skip(ctx)
        if error == "notState": return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx,'–û—à–∏–±–∫–∞')}",description=lang(ctx,"–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!"),color=disnake.Color.red()), delete_after = 10)
        await ctx.message.add_reaction("<:correctCheckmark:1047244074350018700")

    @commands.slash_command(name="lyrics",description="–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç –∏–≥—Ä–∞–µ–º–æ–≥–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å —Ç—Ä–µ–∫–∞")
    async def lyri(self, ctx):
        await ctx.response.defer()
        lyrics = self.song.lyrics(ctx)
        if not lyrics['lyrics']: return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx,'–û—à–∏–±–∫–∞')}",description=lang(ctx,"–¢–µ–∫—Å—Ç —ç—Ç–æ–π –ø–µ—Å–Ω–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"),color=disnake.Color.red()), delete_after = 10)
        await ctx.send(embed=disnake.Embed(title=f"üîç {lang(ctx,'–¢–µ–∫—Å—Ç –æ—Ç —Ç—Ä–µ–∫–∞')} **{lyrics['name']}**",description=lyrics["lyrics"]))

    @commands.command(name="lyrics", usage="?lyrics")
    async def _lyri_(self, ctx):
        lyrics = self.song.lyrics(ctx)
        if not lyrics['lyrics']: return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx,'–û—à–∏–±–∫–∞')}",description=lang(ctx,"–¢–µ–∫—Å—Ç —ç—Ç–æ–π –ø–µ—Å–Ω–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"),color=disnake.Color.red()), delete_after = 10)
        await ctx.send(embed=disnake.Embed(title=f"üîç {lang(ctx,'–¢–µ–∫—Å—Ç –æ—Ç —Ç—Ä–µ–∫–∞')} **{lyrics['name']}**",description=lyrics["lyrics"]))

    @commands.slash_command(name="now-playing",description="–ß—Ç–æ —Å–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç?")
    async def np(self, ctx):
        await ctx.response.defer()
        voice_state = ctx.guild.voice_client
        if voice_state:
            if voice_state.is_playing():
                infor = self.song.now_playing(ctx.guild)
                embed = disnake.Embed(title=infor['name'],color=0x228b22)
                embed.add_field(name=lang(ctx,"–ì–ª–∞–≤–Ω—ã–π –∞–≤—Ç–æ—Ä:"),value=infor['artist'])
                embed.add_field(name=lang(ctx,"–ü—Ä–µ–¥–ª–æ–∂–∏–ª:"),value=f"<@{infor['requester']}>")
                embed.add_field(name=lang(ctx,"–ò—Å—Ç–æ—á–Ω–∏–∫:"),value="<:yandexMusic:1056924402790436934> Yandex Music\n")
                embed.add_field(name=lang(ctx,"–°—Å—ã–ª–∫–∞:"),value=f"[**{lang(ctx,'–≠—Ç–æ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞!')}**]({infor['uri']})")
                embed.add_field(name=lang(ctx,"–ü–æ–∑–∏—Ü–∏—è:"),value=infor['pos'])
                embed.set_thumbnail(url=infor['image'])
                await ctx.send(embed=embed, delete_after = 20)
            else:
                await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx,'–û—à–∏–±–∫–∞!')}",description=lang(ctx,'–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç'),color=disnake.Color.red()), delete_after = 10)
        else:
            await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx,'–û—à–∏–±–∫–∞!')}",description=lang(ctx,"–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç"),color=disnake.Color.red()), delete_after = 10)

    @commands.command(name="now-playing", aliases=["np","now"], usage="?now-playing")
    async def _np_(self, ctx):
        voice_state = ctx.guild.voice_client
        if voice_state:
            if voice_state.is_playing():
                infor = self.song.now_playing(ctx.guild)
                embed = disnake.Embed(title=infor['name'],color=0x228b22)
                embed.add_field(name=lang(ctx,"–ì–ª–∞–≤–Ω—ã–π –∞–≤—Ç–æ—Ä:"),value=infor['artist'])
                embed.add_field(name=lang(ctx,"–ü—Ä–µ–¥–ª–æ–∂–∏–ª:"),value=f"<@{infor['requester']}>")
                embed.add_field(name=lang(ctx,"–ò—Å—Ç–æ—á–Ω–∏–∫:"),value="<:yandexMusic:1056924402790436934> Yandex Music\n")
                embed.add_field(name=lang(ctx,"–°—Å—ã–ª–∫–∞:"),value=f"[**{lang(ctx,'–≠—Ç–æ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞!')}**]({infor['uri']})")
                embed.add_field(name=lang(ctx,"–ü–æ–∑–∏—Ü–∏—è:"),value=infor['pos'])
                embed.set_thumbnail(url=infor['image'])
                await ctx.send(embed=embed, delete_after = 20)
            else:
                await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx,'–û—à–∏–±–∫–∞!')}",description=lang(ctx,'–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç'),color=disnake.Color.red()), delete_after = 10)
        else:
            await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx,'–û—à–∏–±–∫–∞!')}",description=lang(ctx,"–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç"),color=disnake.Color.red()), delete_after = 10)

    @commands.slash_command(name="queue", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å")
    async def queu(self, ctx):
        await ctx.response.defer()
        text = self.song.construct_queue(ctx.guild)
        if not text:
            return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx,'–û—à–∏–±–∫–∞')}",description=lang(ctx,"–û—á–µ—Ä–µ–¥—å –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ –ø—É—Å—Ç–∞!"),color=disnake.Color.red()), delete_after = 10)
        await ctx.send(embed=disnake.Embed(title=f"{lang(ctx,'–û—á–µ—Ä–µ–¥—å —Å–µ—Ä–≤–µ—Ä–∞')} {ctx.guild.name}!",description=text, color=0x228b22))

    @commands.command(name="queue", usage="?queue")
    async def _queu_(self, ctx):
        text = self.song.construct_queue(ctx.guild)
        if not text:
            return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx,'–û—à–∏–±–∫–∞')}",description=lang(ctx,"–û—á–µ—Ä–µ–¥—å –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ –ø—É—Å—Ç–∞!"),color=disnake.Color.red()), delete_after = 10)
        await ctx.send(embed=disnake.Embed(title=f"{lang(ctx,'–û—á–µ—Ä–µ–¥—å —Å–µ—Ä–≤–µ—Ä–∞')} {ctx.guild.name}!",description=text, color=0x228b22))

    @commands.slash_command(name="pause",description="–ü–æ—Å—Ç–∞–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –ø–∞—É–∑—É")
    async def paus_(self, ctx):
        await ctx.response.defer()
        try:
            self.song.pause(ctx.guild)
        except VoiceStateError:
            await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx,'–û—à–∏–±–∫–∞')}",description=lang(ctx,"–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç"),color=disnake.Color.red()), delete_after = 10)
        else:
            await ctx.send(f"<:correctCheckmark:1047244074350018700>, {lang(ctx,'—á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–≤–µ–¥–∏—Ç–µ /resume')}", delete_after = 20)

    @commands.command(name="pause", usage="?pause")
    async def _paus_(self, ctx):
        try:
            self.song.pause(ctx.guild)
        except VoiceStateError:
            await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx,'–û—à–∏–±–∫–∞')}",description=lang(ctx,"–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç"),color=disnake.Color.red(), delete_after = 10))
        else:
            await ctx.send(f"<:correctCheckmark:1047244074350018700>, {lang(ctx,'—á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–≤–µ–¥–∏—Ç–µ /resume')}", delete_after = 20)

    @commands.slash_command(name="resume",description="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ")
    async def resu_(self, ctx):
        try:
            self.song.resume(ctx.guild)
        except VoiceStateError:
            await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx,'–û—à–∏–±–∫–∞')}",description=lang(ctx,"–¢—Ä–µ–∫ —É–∂–µ –∏–≥—Ä–∞–µ—Ç"),color=disnake.Color.red()), delete_after = 10)
        else:
            await ctx.message.add_reaction(f"<:correctCheckmark:1047244074350018700>")

    @commands.command(name="resume", usage="?resume")
    async def _resu_(self, ctx):
        try:
            self.song.resume(ctx.guild)
        except VoiceStateError:
            await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx,'–û—à–∏–±–∫–∞')}",description=lang(ctx,"–¢—Ä–µ–∫ —É–∂–µ –∏–≥—Ä–∞–µ—Ç"),color=disnake.Color.red()), delete_after = 10)
        else:
            await ctx.message.add_reaction(f"<:correctCheckmark:1047244074350018700>")

    @commands.slash_command(name="replay",description="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫ —Å –Ω–∞—á–∞–ª–∞")
    async def re_(self, ctx):
        await ctx.response.defer()
        voice_state = ctx.guild.voice_client
        if voice_state and voice_state.is_playing():
            await self.song.replay(ctx)
            await ctx.send("<:correctCheckmark:1047244074350018700>")
        else:
            await ctx.send("<:wrongCheckmark:1047244133078675607>" + lang(ctx, "–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ!"), delete_after = 10)

    @commands.command(name="replay", usage="?replay")
    async def _re_(self, ctx):
        voice_state = ctx.guild.voice_client
        if voice_state and voice_state.is_playing():
            await self.song.replay(ctx)
            await ctx.message.add_reaction("<:correctCheckmark:1047244074350018700>")
        else:
            await ctx.send("<:wrongCheckmark:1047244133078675607>" + lang(ctx, "–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ!"), delete_after = 10)

    @commands.slash_command(name="random-track",description="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ç—Ä–µ–∫")
    async def ra_tra(self, ctx):
        await ctx.response.defer()
        voice_state = ctx.guild.voice_client
        track = self.song.get_rand_track(ctx)
        await self.song.add_for_id(ctx, track["id"])
        if voice_state:
            if voice_state.is_playing():
                #await Song.leave_channel(ctx)
                pass
            else:
                error = await self.song.play(ctx)
                if error == "notChannel": return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx,'–û—à–∏–±–∫–∞')}",description=lang(ctx,"–ó–∞–π–¥–∏—Ç–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª."),color=disnake.Color.red()), delete_after = 20)
        else:
            error = await self.song.play(ctx)
            if error == "notChannel": return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx,'–û—à–∏–±–∫–∞')}",description=lang(ctx,"–ó–∞–π–¥–∏—Ç–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª."),color=disnake.Color.red()), delete_after = 20)
        await ctx.send(f"–†–∞–Ω–¥–æ–º–Ω—ã–π —Ç—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å!")

    @commands.command(name="random-track", aliases=["rtrack"], usage="?random-track")
    async def _ra_tra_(self, ctx):
        voice_state = ctx.guild.voice_client
        track = self.song.get_rand_track(ctx)
        await self.song.add_for_id(ctx, track["id"])
        if voice_state:
            if voice_state.is_playing():
                pass
            else:
                error = await self.song.play(ctx)
                if error == "notChannel": return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx,'–û—à–∏–±–∫–∞')}",description=lang(ctx,"–ó–∞–π–¥–∏—Ç–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª."),color=disnake.Color.red()), delete_after = 10)
        else:
            error = await self.song.play(ctx)
            if error == "notChannel": return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx,'–û—à–∏–±–∫–∞')}",description=lang(ctx,"–ó–∞–π–¥–∏—Ç–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª."),color=disnake.Color.red()), delete_after = 10)
        await ctx.message.add_reaction("<:correctCheckmark:1047244074350018700>")

class Main(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.slash_command(name="help",description="–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏.")
    async def help(self, ctx):
        await ctx.response.defer()
        embedmain = disnake.Embed(title=lang(ctx,"–ù–∞—á–Ω–∏—Ç–µ –Ω–∞–∂–∏–º–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä —á–µ–≥–æ —Ç–æ."),description=f"<:yandexMusic:1056924402790436934> **{lang(ctx,'–Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞')}**\n\nüéÆ **{lang(ctx,'–ò–≥—Ä—ã')}**\n\n<:cooldown:1047243027166539846> **{lang(ctx,'–ú–æ–¥–µ—Ä–∞—Ü–∏—è')}**\n\nüéÅ**{lang(ctx,'–£—Ç–∏–ª–∏—Ç—ã')}**\n\n:dollar: **{lang(ctx,'–≠–∫–æ–Ω–æ–º–∏–∫–∞')}**\n\n<:pandaElf:1047241340657872948> **{lang(ctx,'–û—Ç–Ω–æ—à–µ–Ω–∏—è')}**\n\n<:thinks1:1047243641388793938> **{lang(ctx,'–†–ü')}**\n\n‚öô **{lang(ctx,'–ù–∞—Å—Ç—Ä–æ–π–∫–∏')}**",color=0x228b22)
        await ctx.send(embed=embedmain,components=[
            disnake.ui.Button(label=lang(ctx,"–Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞"),style=disnake.ButtonStyle.danger, custom_id="mus"),
            disnake.ui.Button(label=lang(ctx,"–ò–≥—Ä—ã"), style=disnake.ButtonStyle.success, custom_id="games"),
            disnake.ui.Button(label=lang(ctx,"–ú–æ–¥–µ—Ä–∞—Ü–∏—è"), style=disnake.ButtonStyle.danger, custom_id="mod"),
            disnake.ui.Button(label=lang(ctx,"–£—Ç–∏–ª–∏—Ç—ã"), style=disnake.ButtonStyle.success, custom_id="utils"),
            disnake.ui.Button(label=lang(ctx,"–≠–∫–æ–Ω–æ–º–∏–∫–∞"), style=disnake.ButtonStyle.danger, custom_id="eco"),
            disnake.ui.Button(label=lang(ctx,"–û—Ç–Ω–æ—à–µ–Ω–∏—è"), style=disnake.ButtonStyle.success, custom_id="relaship"),
            disnake.ui.Button(label=lang(ctx,"–†–ü"), style=disnake.ButtonStyle.danger, custom_id="roleplay"),
            disnake.ui.Button(label=lang(ctx,"–ù–∞—Å—Ç—Ä–æ–π–∫–∏"), style=disnake.ButtonStyle.success, custom_id="setts")
        ])

        embedmus = disnake.Embed(title=f"<:yandexMusic:1056924402790436934> {lang(ctx, '–Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞')}",description=f"`/play <{lang(ctx, '–Ω–∞–∑–≤–∞–Ω–∏–µ')}>` - {lang(ctx, '–ù–∞—á–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ')}\n`/skip` - {lang(ctx, '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–µ–∫')}\n`/stop` - {lang(ctx, '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –≤—ã–π—Ç–∏ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞')}\n`/join` - {lang(ctx, '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –±–æ—Ç–∞ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª')}\n`/queue` - {lang(ctx, '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å —Å–µ—Ä–≤–µ—Ä–∞')}\n`/now-playing` - {lang(ctx, '—á—Ç–æ —Å–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç?')}\n`/pause` - {lang(ctx,'–ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –ø–∞—É–∑—É')}\n`/resume` - {lang(ctx, '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ')}\n`/replay` - {lang(ctx, '–Ω–∞—á–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞')}",color=0x228b22)
        embedgames = disnake.Embed(title=f"üéÆ {lang(ctx, '–ò–≥—Ä—ã')}", description=f"`/maths-plus` - {lang(ctx, '–ò–≥—Ä–∞ –≤ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É —Å —Å–ª–æ–∂–µ–Ω–∏–µ–º')}\n`/maths-minus` - {lang(ctx, '–ò–≥—Ä–∞ –≤ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É —Å –≤—ã—á–∏—Ç–∞–Ω–∏–µ–º')}\n`/maths-multiply` - {lang(ctx, '–ò–≥—Ä–∞ –≤ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É —Å —É–º–Ω–æ–∂–µ–Ω–∏–µ–º')}\n`/tape` - {lang(ctx, '–ò–≥—Ä–∞ –≤ —Ä—É–ª–µ—Ç–∫—É')}\n`/truth-or-dare` - {lang(ctx, '–ò–≥—Ä–∞ –≤ –ø—Ä–∞–≤–¥—É –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ')}\n`/heads-or-tails` - {lang(ctx, '–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É')}\n`/door` - {lang(ctx, '–ò–≥—Ä–∞ –í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–≤–µ—Ä—å.')}\n`/akinator` - {lang(ctx, '–°—ã–≥—Ä–∞—Ç—å –≤ –∞–∫–∏–Ω–∞—Ç–æ—Ä–∞')}", color=0x228b22)
        embedmod = disnake.Embed(title=f"<:cooldown:1047243027166539846> {lang(ctx, '–ú–æ–¥–µ—Ä–∞—Ü–∏—è')}",description=f"`/ban [member] <reason>` - {lang(ctx, '–ó–∞–±–∞–Ω–∏—Ç—å –∫–æ–≥–æ-—Ç–æ')}\n`/kick [member] <reason>` - {lang(ctx, '–í—ã–≥–Ω–∞—Ç—å –∫–æ–≥–æ –ª–∏–±–æ —Å —Å–µ—Ä–≤–µ—Ä–∞')}\n`/mute [member] <time>` - {lang(ctx, '–ó–∞–≥–ª—É—à–∏—Ç—å –∫–æ–≥–æ —Ç–æ –Ω–∞ —Å–∫–æ–ª—å–∫–æ —Ç–æ –º–∏–Ω—É—Ç')}\n`/warn [@member] <reason>` - {lang(ctx, '–í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ')}\n`/warns` - {lang(ctx, '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ')}\n`/unwarn [{lang(ctx, '–Ω–æ–º–µ—Ä_—Å–ª—É—á–∞—è')}]` - {lang(ctx, '–°–Ω—è—Ç—å –ø—Ä–µ–¥')}", color=0x228b22)
        embedutils = disnake.Embed(title=f"<:Magic:1047241900370956298> {lang(ctx, '–£—Ç–∏–ª–∏—Ç—ã')}",description=f"`/profile` - {lang(ctx, '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–æ—Ç–æ—Ä—É—é –æ –≤–∞—Å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç Vex')}\n`/lgbt` - {lang(ctx, '–î–µ–ª–∞–µ—Ç –≤–∞–º –õ–ì–ë–¢ –∞–≤–∞—Ç–∞—Ä–∫—É')}\n`/jail` - {lang(ctx, '–î–µ–ª–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫—É, —Å–∏–¥—è—â—É—é –≤ —Ç—é—Ä—å–º–µ')}\n`/passed` - {lang(ctx, '–î–µ–ª–∞–µ—Ç –Ω–∞ –≤–∞—à–µ–π –∞–≤–∞—Ç–∞—Ä–∫–µ –Ω–∞–¥–ø–∏—Å—å Mission Passed, respect+')}\n`/wasted` - {lang(ctx, '–î–µ–ª–∞–µ—Ç –Ω–∞ –≤–∞—à–µ–π –∞–≤–∞—Ç–∞—Ä–∫–µ –Ω–∞–¥–ø–∏—Å—å WASTED')}\n`/pixelate` - {lang(ctx, '–ü–∏–∫—Å–∏–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –∞–≤–∞—Ç–∞—Ä')}\n`/triggered` - {lang(ctx, '–î–µ–ª–∞–µ—Ç –Ω–∞ –≤–∞—à–µ–π –∞–≤–∞—Ç–∞—Ä–∫–µ –Ω–∞–¥–ø–∏—Å—å TRIGGERED')}\n`/ussr` - {lang(ctx, '–ù–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –Ω–∞ –≤–∞—à –∞–≤–∞—Ç–∞—Ä —Ñ–ª–∞–≥ –°–°–°–†')}\n`/youtube-comment [{lang(ctx, '–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π')}]` - {lang(ctx, '–î–µ–ª–∞–µ—Ç –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π —Å –≤–∞—à–∏–º –Ω–∏–∫–æ–º, –∞–≤–∞—Ç–∞—Ä–æ–º –∏ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–µ–º')}\n`/voice [{lang(ctx, '–¢–µ–∫—Å—Ç')}]` - {lang(ctx, '–°–æ–∑–¥–∞—ë—Ç –æ–∑–≤—É—á–∫—É —É–∫–∞–∑–∞–Ω–æ–≥–æ –≤–∞–º–∏ —Ç–µ–∫—Å—Ç–∞')}\n`/encode [{lang(ctx, '—Ç–µ–∫—Å—Ç')}]` - {lang(ctx, '–ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ base64')}\n`/decode [base64]` - {lang(ctx, '–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å base64 –≤ —Ç–µ–∫—Å—Ç')}\n`/joke` - {lang(ctx, '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—É—é —à—É—Ç–∫—É(–°–º–µ—à–Ω–∞—è –∏–ª–∏ –Ω–µ—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ê–ü–ò)')}\n`/poll [sel1] [sel2] <sel...>` - {lang(ctx, '–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ')}\n`/random [{lang(ctx, '–≤–∞—Ä–∏–∞—Ü–∏–∏')}]` - {lang(ctx, '–†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä')}\n`/quote` - {lang(ctx, '–¶–∏—Ç–∞—Ç—ã—ã—ã –≤–µ–ª–∏–∫–∏–∏–∏—Ö –ª—é–¥–µ–µ–π')}\n`/weather [city]` - {lang(ctx, '–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ –†–æ—Å—Å–∏–∏')}\n`/animego` - {lang(ctx, '–ò—Å–∫–∞—Ç—å –∞–Ω–∏–º–µ-—Ñ–∏–ª—å–º—ã –Ω–∞ animego.net')}",color=0x228b22)
        embedeco = disnake.Embed(title=f"<:dollar:1051974269296451684> {lang(ctx, '–≠–∫–æ–Ω–æ–º–∏–∫–∞')}",description=f"`/daily` - {lang(ctx, '–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É, –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∞–º–∏')}\n`/work [!{lang(ctx, '—Ä–∞–±–æ—Ç–∞')}]` - {lang(ctx, '–†–∞–±–æ—Ç–∞—Ç—å —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏')}\n`/balance` - {lang(ctx, '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –∏–ª–∏ —á—É–∂–æ–π –±–∞–ª–∞–Ω—Å')}\n`/add-money [{lang(ctx, '—Å—É–º–º–∞')}] [{lang(ctx, '—É—á–∞—Å—Ç–Ω–∏–∫')}]` - {lang(ctx, '–í—ã–¥–∞—Ç—å –∏–Ω—É—é —Å—É–º–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.')}\n`/reduce-money [{lang(ctx, '—Å—É–º–º–∞')}] [{lang(ctx, '—É—á–∞—Å—Ç–Ω–∏–∫')}]` - {lang(ctx, '–∑–∞–±–∏—Ä–∞–µ—Ç –∏–Ω—É—é —Å—É–º–º—É —É —á–∞—Å—Ç–Ω–∏–∫–∞')}", color=0x228b22)
        embedrela = disnake.Embed(title=f"<:pandaElf:1047241340657872948> {lang(ctx, '–û—Ç–Ω–æ—à–µ–Ω–∏—è')}",description=f"`/hug [{lang(ctx, '—É—á–∞—Å—Ç–Ω–∏–∫')}]` - {lang(ctx, '–û–±–Ω—è—Ç—å –∫–æ–≥–æ –ª–∏–±–æ.')}\n`/pat [{lang(ctx, '—É—á–∞—Å—Ç–Ω–∏–∫')}]` - {lang(ctx, '–ü–æ–≥–ª–∞–¥–∏—Ç—å –∫–æ–≥–æ –ª–∏–±–æ')}",color=0x228b22)
        embedrp = disnake.Embed(title=f"<:shockedThinsk4:1047243843541680229> {lang(ctx, '–†–æ–ª–µ–≤–∞—è –∏–≥—Ä–∞')}",description=f"`/acc-register [{lang(ctx, '–∏–º—è')}]` - {lang(ctx, '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞')}\n`/acc-update-avatar [{lang(ctx, '–∏–º—è')}]` - {lang(ctx, '–û–±–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂—É')}\n`/acc-all` - {lang(ctx, '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π')}\n`/acc-send [{lang(ctx, '–∏–º—è')}] [{lang(ctx, '—Å–æ–æ–±—â–µ–Ω–∏—è')}]` - {lang(ctx, '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞')}",color=0x228b22)
        embedsetts = disnake.Embed(title=f"‚öô {lang(ctx, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏')}",description=f"`/set-welcome-channel [{lang(ctx, '–∫–∞–Ω–∞–ª')}]` - {lang(ctx, '–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö')}\n`/set-bye-channel [{lang(ctx, '–∫–∞–Ω–∞–ª')}]` - {lang(ctx, '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—à–µ–¥—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö')}\n`/set-daily [{lang(ctx, '—Å—É–º–º–∞')}] - {lang(ctx, '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—É–º–º—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–∏–∑–∞, 0 –µ—Å–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å')}`\n`/set-anti-badwords` - {lang(ctx, '–í–∫–ª—é—á–∏—Ç—å –∑–∞–ø—Ä–µ—Ç –ø–ª–æ—Ö–∏—Ö —Å–ª–æ–≤')}\n`/set-work-price [{lang(ctx, '—Å—É–º–º–∞')}]` - {lang(ctx, '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—É–º–º—É –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∑–∞ —Ä–∞–±–æ—Ç—É')}\n`/set-lang [{lang(ctx, '—è–∑—ã–∫')}]` - {lang(ctx, '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π —è–∑—ã–∫')}`\n`/disable-set [{lang(ctx, '–Ω–∞—Å—Ç—Ä–æ–π–∫–∞')}]` - {lang(ctx, '–û—Ç–∫–ª—é—á–∏—Ç—å –∫–∞–∫—É—é —Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫—É, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –≤—ã–ø–∞–¥–∞—é—â–∏–º —Å–ø–∏—Å–∫–æ–º')}\n`/ping` - {lang(ctx, '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –±–æ—Ç–∞')}",color=0x228b22)

        status = True
        def check(msg):
            return msg.guild.id == ctx.guild.id and msg.author.id == ctx.author.id
        while status:
            try:
                btn = await bot.wait_for("button_click",timeout=80,check=check)
                await btn.response.defer()
                await ctx.edit_original_response(content="–û–∂–∏–¥–∞–π—Ç–µ...")
                if btn.component.custom_id == "mus":
                    await ctx.edit_original_response(content=None, embed=embedmus)
                elif btn.component.custom_id == "games":
                    await ctx.edit_original_response(content=None, embed=embedgames)
                elif btn.component.custom_id == "mod":
                    await ctx.edit_original_response(content=None, embed=embedmod)
                elif btn.component.custom_id == "utils":
                    await ctx.edit_original_response(content=None, embed=embedutils)
                elif btn.component.custom_id == "eco":
                    await ctx.edit_original_response(content=None, embed=embedeco)
                elif btn.component.custom_id == "relaship":
                    await ctx.edit_original_response(content=None, embed=embedrela)
                elif btn.component.custom_id == "roleplay":
                    await ctx.edit_original_response(content=None, embed=embedrp)
                elif btn.component.custom_id == "setts":
                    await ctx.edit_original_response(content=None, embed=embedsetts)
            except asyncio.TimeoutError:
                status = False
                return await ctx.edit_original_response(components=None)


class Games(commands.Cog):
    def __init__(self, bot):
        self.bot = bot


    @commands.slash_command(name="maths-minus",description="–ò–≥—Ä–∞ –≤ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É —Å –≤—ã—á–∏—Ç–∞–Ω–∏–µ–º")
    async def mathsminus(self, ctx):
        await ctx.response.defer()
        first = random.randint(1, 20000)
        second = random.randint(1, 1500)
        reply = first - second
        await ctx.send(embed=disnake.Embed(title=lang(ctx,"–ò–≥—Ä–∞ –≤ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É"),description=lang(ctx,f"–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç {first} - {second}?")))
        status = True
        while status:
            wait = await bot.wait_for("message")
            if wait.guild.id == ctx.guild.id:
                if wait.author.id == ctx.author.id:
                    user_repl = wait.content.lower()
                    try:
                        user_repl = int(user_repl)
                    except ValueError:
                        status = False
                        return await ctx.send(embed=disnake.Embed(title=lang(ctx,"–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ —á–∏—Å–ª–æ–º!"),description=lang(ctx,f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –±—ã–ª–æ {reply}"),color=disnake.Color.red()), delete_after = 10)
                    if user_repl == reply:
                        status = False
                        return await ctx.send(embed=disnake.Embed(title=lang(ctx,"–¢–≤–æ–π –æ—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π!"),description=lang(ctx,"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!"),color=disnake.Color.green()), delete_after = 20)
                    else:
                        status = False
                        return await ctx.send(embed=disnake.Embed(title=lang(ctx,"–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ –≤–µ—Ä–Ω–æ!"),description=lang(ctx,f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –±—ã–ª–æ {reply}"),color=disnake.Color.red()), delete_after = 10)

    @commands.command(name="maths-minus", usage="?maths-minus")
    async def _mathsminus_(self, ctx):
        first = random.randint(1, 20000)
        second = random.randint(1, 1500)
        reply = first - second
        await ctx.send(embed=disnake.Embed(title=lang(ctx,"–ò–≥—Ä–∞ –≤ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É"),description=lang(ctx,f"–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç {first} - {second}?")))
        status = True
        while status:
            wait = await bot.wait_for("message")
            if wait.guild.id == ctx.guild.id:
                if wait.author.id == ctx.author.id:
                    user_repl = wait.content.lower()
                    try:
                        user_repl = int(user_repl)
                    except ValueError:
                        status = False
                        return await ctx.send(embed=disnake.Embed(title=lang(ctx,"–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ —á–∏—Å–ª–æ–º!"),description=lang(ctx,f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –±—ã–ª–æ {reply}"),color=disnake.Color.red()), delete_after = 10)
                    if user_repl == reply:
                        status = False
                        return await ctx.send(embed=disnake.Embed(title=lang(ctx,"–¢–≤–æ–π –æ—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π!"),description=lang(ctx,"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!"),color=disnake.Color.green()), delete_after = 20)
                    else:
                        status = False
                        return await ctx.send(embed=disnake.Embed(title=lang(ctx,"–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ –≤–µ—Ä–Ω–æ!"),description=lang(ctx,f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –±—ã–ª–æ {reply}"),color=disnake.Color.red()), delete_after = 10)

    @commands.slash_command(name="maths-plus",description="–ò–≥—Ä–∞ –≤ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É —Å —Å–ª–æ–∂–µ–Ω–∏–µ–º")
    async def mathsplus(self, ctx):
        await ctx.response.defer()
        first = random.randint(1, 1500)
        second = random.randint(1, 1500)
        reply = first + second
        await ctx.send(embed=disnake.Embed(title=lang(ctx,"–ò–≥—Ä–∞ –≤ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É"),description=lang(ctx,f"–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç {first} + {second}?"))) #–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä
        status = True
        while status:
            wait = await bot.wait_for("message")
            if wait.guild.id == ctx.guild.id:
                if wait.author.id == ctx.author.id:
                    user_repl = wait.content.lower()
                    try:
                        user_repl = int(user_repl)
                    except ValueError:
                        status = False
                        return await ctx.send(embed=disnake.Embed(title=lang(ctx,"–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ —á–∏—Å–ª–æ–º, –ø–æ—ç—Ç–æ–º—É –æ—Ü–µ–Ω–∫–∞ 2!"),description=lang(ctx,f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –±—ã–ª–æ {reply}"),color=disnake.Color.red()), delete_after = 10) # –ì–æ–≤–æ—Ä–∏–º –æ —Ç–æ–º —á—Ç–æ –º—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ù–ï —á–∏—Å–ª–æ–º
                    if user_repl == reply:
                        status = False
                        return await ctx.send(embed=disnake.Embed(title=lang(ctx,"–¢–≤–æ–π –æ—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π!"),description=lang(ctx,"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é. –û—Ü–µ–Ω–∫–∞ 5."),color=disnake.Color.green()), delete_after = 20) # –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –≤–µ—Ä–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
                    else:
                        status = False
                        return await ctx.send(embed=disnake.Embed(title=lang(ctx,"–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ –≤–µ—Ä–Ω–æ, –ø–æ—ç—Ç–æ–º—É –æ—Ü–µ–Ω–∫–∞ 2!"),description=lang(ctx,f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –±—ã–ª–æ {reply}"),color=disnake.Color.red()), delete_after = 10) # –ì–æ–≤–æ—Ä–∏–º –æ–± –Ω–µ–≤–µ—Ä–Ω–æ–º –æ—Ç–≤–µ—Ç–µ, –∏ –≥–æ–≤–æ—Ä–∏–º –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç

    @commands.command(name="maths-plus", usage="?maths-plus")
    async def _mathsplus_(self, ctx):
        first = random.randint(1, 1500)
        second = random.randint(1, 1500)
        reply = first + second
        await ctx.send(embed=disnake.Embed(title=lang(ctx,"–ò–≥—Ä–∞ –≤ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É"),description=lang(ctx,f"–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç {first} + {second}?"))) #–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä
        status = True
        while status:
            wait = await bot.wait_for("message")
            if wait.guild.id == ctx.guild.id:
                if wait.author.id == ctx.author.id:
                    user_repl = wait.content.lower()
                    try:
                        user_repl = int(user_repl)
                    except ValueError:
                        status = False
                        return await ctx.send(embed=disnake.Embed(title=lang(ctx,"–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ —á–∏—Å–ª–æ–º, –ø–æ—ç—Ç–æ–º—É –æ—Ü–µ–Ω–∫–∞ 2!"),description=lang(ctx,f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –±—ã–ª–æ {reply}"),color=disnake.Color.red()), delete_after = 10) # –ì–æ–≤–æ—Ä–∏–º –æ —Ç–æ–º —á—Ç–æ –º—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ù–ï —á–∏—Å–ª–æ–º
                    if user_repl == reply:
                        status = False
                        return await ctx.send(embed=disnake.Embed(title=lang(ctx,"–¢–≤–æ–π –æ—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π!"),description=lang(ctx,"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é. –û—Ü–µ–Ω–∫–∞ 5."),color=disnake.Color.green()), delete_after = 20) # –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –≤–µ—Ä–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
                    else:
                        status = False
                        return await ctx.send(embed=disnake.Embed(title=lang(ctx,"–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ –≤–µ—Ä–Ω–æ, –ø–æ—ç—Ç–æ–º—É –æ—Ü–µ–Ω–∫–∞ 2!"),description=lang(ctx,f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –±—ã–ª–æ {reply}"),color=disnake.Color.red()), delete_after = 10) # –ì–æ–≤–æ—Ä–∏–º –æ–± –Ω–µ–≤–µ—Ä–Ω–æ–º –æ—Ç–≤–µ—Ç–µ, –∏ –≥–æ–≤–æ—Ä–∏–º –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç

    @commands.slash_command(name="maths-multiply",description="–ò–≥—Ä–∞ –≤ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É —Å —É–º–Ω–æ–∂–µ–Ω–∏–µ–º")
    async def mathsmultiply(self, ctx):
        await ctx.response.defer()
        first = random.randint(1, 1000)
        second = random.randint(1, 1000)
        reply = first * second
        await ctx.send(embed=disnake.Embed(title=lang(ctx,"–ò–≥—Ä–∞ –≤ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É"),description=lang(ctx,f"–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç {first} * {second}?")))
        status = True
        while status:
            wait = await bot.wait_for("message")
            if wait.guild.id == ctx.guild.id:
                if wait.author.id == ctx.author.id:
                    user_repl = wait.content.lower()
                    try:
                        user_repl = int(user_repl)
                    except ValueError:
                        status = False
                        return await ctx.send(embed=disnake.Embed(title=lang(ctx,"–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ —á–∏—Å–ª–æ–º, –ø–æ—ç—Ç–æ–º—É –æ—Ü–µ–Ω–∫–∞ 2!"),description=lang(ctx,f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –±—ã–ª–æ {reply}"),color=disnake.Color.red()), delete_after = 10)
                    if user_repl == reply:
                        status = False
                        return await ctx.send(embed=disnake.Embed(title=lang(ctx,"–¢–≤–æ–π –æ—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π!"),description=lang(ctx,"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é. –û—Ü–µ–Ω–∫–∞ 5."),color=disnake.Color.green()), delete_after = 20)
                    else:
                        status = False
                        return await ctx.send(embed=disnake.Embed(title="–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ –≤–µ—Ä–Ω–æ..."),description=f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –±—ã–ª–æ {reply}",color=disnake.Color.red(), delete_after = 10)


    @commands.slash_command(name="tape", description="–ö—Ä—É—Ç–∞–Ω—É—Ç—å —Ä—É–ª–µ—Ç–∫—É –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª-–≤–æ –±–∞–ª–ª–æ–≤")
    @commands.cooldown(1, 60, commands.BucketType.user) # –°—Ç–∞–≤–∏–º –∫—É–ª–¥–∞—É–Ω
    async def tape(self, ctx):
        await ctx.response.defer()
        mynum = random.randint(20, 3000)
        type_of_num = "Error"
        type_color = 0xffffff
        if mynum == 20:
            type_of_num = "–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ"
            type_color = 0xffffff
        if mynum > 20:
            type_of_num = "—Ä–µ–¥–∫–æ–µ"
            type_color = 0x0084ff
        if mynum > 100:
            type_of_num = "—ç–ø–∏—á–µ—Å–∫–æ–µ"
            type_color = 0x6f00ff
        if mynum > 1000:
            type_of_num = "–º–∏—Ñ–∏—á–µ—Å–∫–æ–µ"
            type_color = 0xff0000
        if mynum > 2500:
            type_of_num = "–õ–ï–ì–ï–ù–î–ê–†–ù–û–ï"
            type_color = 0xffee00
        embedfortune = disnake.Embed(color=0x228b22).set_image(url="https://media.tenor.com/fJ10v8TLEi0AAAAC/wheel-of-fortune.gif")
        await ctx.send(embed=embedfortune, delete_after = 23)
        await asyncio.sleep(3)
        img = Image.new('RGBA', (400, 150), '#232529')
        idraw = ImageDraw.Draw(img)
        headline = ImageFont.truetype('comfortaa.ttf', size = 25)
        undertext = ImageFont.truetype('comfortaa.ttf', size = 15)
        idraw.text((10,15), f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {mynum} –æ—á–∫–æ–≤!", font=headline)
        idraw.text((105, 40), f"–≠—Ç–æ {type_of_num} —á–∏—Å–ª–æ!", font=undertext)
        idraw.text((105, 65), f"–í—ã–π–≥—Ä–∞–≤—à–∏–π - {ctx.author.name}", font=undertext)
        idraw.text((10, 135), f'Vex Draw\'s', font=undertext)
        img.save("tape_result.png")
        embed = disnake.Embed(color=type_color).set_image(file=disnake.File("tape_result.png"))
        await ctx.edit_original_response(embed=embed)
        last_member_count = 0
        try:
            last_member_count = int(Memory.read(f"scope/{ctx.author.id}balls.txt")) # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—à–ª–æ–µ –∫–æ–ª-–≤–æ –æ—á–∫–æ–≤ —é–∑–µ—Ä–∞
        except:
            last_member_count = 0 # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ 0 –æ—á–∫–æ–≤

        Memory.write(f"scope/{ctx.author.id}balls.txt", last_member_count + mynum) # –ü—Ä–∏–±–∞–≤–ª—è–µ–º –∫ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–º –æ—á–∫–∞–º –ø—Ä–æ—à–ª–æ–µ –∫–æ–ª-–≤–æ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–∞–º—è—Ç—å

    @commands.slash_command(name="truth-or-dare", description="–ò–≥—Ä–∞ –≤ –ø –∏–ª–∏ –¥")
    async def t_or_d(self, ctx):
        truth = ["–¢–µ–±—è –ø—Ä–∏–≤–ª–µ–∫–∞—é—Ç –ø–∞—Ä–Ω–∏, –∏–ª–∏ –¥–µ–≤—É—à–∫–∏?","–ö–æ–≥–æ —Ç—ã –ª—é–±–∏—à—å? –ù–∞–∑–æ–≤–∏ –µ–≥–æ/–µ—ë –∏–º—è.","–ö–∞–∫–∏–µ —è–∑—ã–∫–∏ —Ç—ã –∑–Ω–∞–µ—à—å? üåé","–ö–∞–∫–æ–µ —Ç–≤–æ—ë —Ö–æ–±–±–∏?","–¢—ã –≤—ã–ø–∏–≤–∞–ª –∫–æ–≥–¥–∞ –Ω–∏–±—É–¥—å?","–¢—ã —Ö–æ–¥–∏—à—å –Ω–∞ –∫–∞–∫–∏–µ –Ω–∏–±—É–¥—å –¥–æ–ø. –∑–∞–Ω—è—Ç–∏—è?","–ö–∞–∫–æ–π —Ç–≤–æ–π –ª—é–±–∏–º—ã–π –Ω–∞–ø–∏—Ç–æ–∫?","–ö–∞–∫–∞—è —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –ø–∏—â–∞?","–¢—ã –∑–Ω–∞–µ—à—å —á—Ç–æ —Ç–æ –≤–∑—Ä–æ—Å–ª–æ–µ? –†–∞—Å—Å–∫–∞–∂–∏. (–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–Ω–∞–¥—É –≤—Ç–æ—Ä–æ–π —Ä–∞–∑, –µ—Å–ª–∏ –∏–≥—Ä–∞–µ—Ç–µ —Å –¥–µ—Ç—å–º–∏.)","–ö–∞–∫–æ–π –±—ã–ª–∞ —Ç–≤–æ—è —Å–∞–º–∞—è –Ω–µ–ª–æ–≤–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è? –†–∞—Å—Å–∫–∞–∂–∏ –æ –Ω–µ–π.","–í –∫–∞–∫–æ–º —Ç—ã –∫–ª–∞—Å—Å–µ?(–ò–ª–∏ –∂–µ –∫–µ–º —Ä–∞–±–æ—Ç–∞–µ—à—å)","–¢—ã –∑–Ω–∞–µ—à—å —á—Ç–æ –Ω–∏–±—É–¥—å –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è? –ü–æ–¥–µ–ª–∏—Å—å —ç—Ç–∏–º –µ—Å–ª–∏ –¥–∞.","–ß—Ç–æ–±—ã —Ç—ã –≤—ã–±—Ä–∞–ª - Adidas –∏–ª–∏ Nike?(–Ω–µ —Ä–µ–∫–ª–∞–º–∞)","–ö–µ–º —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –±—É–¥—É—â–µ–º?(–ï—Å–ª–∏ —É–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—à—å)","–°–∫–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å —É —Ç–µ–±—è –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–µ–Ω–µ–≥? <:dollar:1051974269296451684>"]
        dare = ["–°–∫–∞–∂–∏ —Ç–æ–º—É, –∫–æ–≥–æ –ª—é–±–∏—à—å –æ —Ç–æ–º, —á—Ç–æ —Ç—ã –ª—é–±–∏—à—å –µ–≥–æ. üíú","–ù–∞–π–¥–∏ –≤–µ–Ω–∏–∫, –∞ –ª—É—á—à–µ –º–µ—Ç–ª—É, –∏ –∏–∑–æ–±—Ä–∞–∑–∏ –≤–µ–¥—å–º—É, –ª–µ—Ç–∞—é—â—É—é –Ω–∞ –º–µ—Ç–ª–µ —Å —Å–µ—Ä—å—ë–∑–Ω—ã–º –ª–∏—Ü–æ–º.","–ò–∑–æ–±—Ä–∞–∑–∏ —Å–≤–æ—ë –ª—é–±–∏–º–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ","–ü–æ–≤—Ç–æ—Ä–∏ —Å–≤–æ–π –ª—é–±–∏–º—ã–π –º–µ–º.","–°–∫–∞–∂–∏ —á—Ç–æ —Ç–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º","–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å –±–µ–∑ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –Ω–∞ –≤–µ—Å—å –¥–æ–º –∫—Ä–∏–∫–Ω–∏ \"–ì–û–õ–£–ë–ö–ò –Ø –î–û–ú–ê\"","–°–¥–µ–ª–∞–π —É–∂–∞—Å–Ω–æ–µ —Å–µ–ª—Ñ–∏ –∏ –ø–æ—Å—Ç–∞–≤—å –µ–≥–æ —Å–µ–±–µ –Ω–∞ –∞–≤–∞—Ç–∞—Ä –Ω–∞ 3 –¥–Ω—è.","–°–Ω–∏–º–∏ —Å–≤–æ–∏ –Ω–æ—Å–∫–∏ —Ä—Ç–æ–º(–ó—É–±–∞–º–∏)","–ü–æ–≥–æ–≤–æ—Ä–∏ —Å –ø–æ–¥—É—à–∫–æ–π 5 –º–∏–Ω—É—Ç, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã –µ—ë –ª—é–±–∏—à—å.","–ò–∑–¥–∞–≤–∞–π –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã–µ –∏ –≥—Ä–æ–º–∫–∏–µ –∑–≤—É–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ –≤—Å–µ–≥–æ –¥–Ω—è, –∫–æ–≥–¥–∞ –µ—à—å –∏–ª–∏ –ø—å—ë—à—å.","–†–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–π —Å–æ –≤—Å–µ–º–∏ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞—è —Ä–æ—Ç.","–ü–æ—Å–ø–æ—Ä—å —Å–æ —Å—Ç–µ–Ω–∫–æ–π","–ü–æ–¥–µ—Ä–∏—Å—å —Å–æ —Å—Ç–µ–Ω–∫–æ–π","–ü—Ä–æ–≤–µ—Ä—å, —Å–∫–æ–ª—å–∫–æ –≤–∏–Ω–æ–≥—Ä–∞–¥–∏–Ω —É —Ç–µ–±—è –ø–æ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤–æ —Ä—Ç—É.","–í—ã–π–¥–∏ –Ω–∞ —É–ª–∏—Ü—É, –∏ –ø—Ä–æ–∫—Ä–∏—á–∏ \"–û –ù–ï–¢! –ú–ï–ù–Ø –£–°–´–ù–û–í–ò–õ–ò(–£–î–û–ß–ï–†–ò–õ–ò)\""]
        await ctx.response.defer()
        questo = disnake.Embed(title="–ß—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç –∏–≥—Ä–æ–∫, –∏–≥—Ä–∞—é—â–∏–π –≤ –∏–≥—Ä—É? üéÅ",color=0x228b22)
        await ctx.send(embed=questo,components=[
            disnake.ui.Button(label="–ü—Ä–∞–≤–¥–∞", style=disnake.ButtonStyle.success, custom_id="truth"),
            disnake.ui.Button(label="–î–µ–π—Å—Ç–≤–∏–µ", style=disnake.ButtonStyle.danger, custom_id="dare"),
        ])

        @self.bot.listen("on_button_click")
        async def game_listener(ctx: disnake.MessageInteraction):
            if ctx.component.custom_id == "truth":
                await ctx.send(embed=disnake.Embed(description=f"{ctx.author.mention} {random.choice(truth)}",color=0x228b22), delete_after = 10)
            if ctx.component.custom_id == "dare":
                await ctx.send(embed=disnake.Embed(description=f"{ctx.author.mention} {random.choice(dare)}",color=0x228b22), delete_after = 10)

    @commands.slash_command(name="heads-or-tails",description="–ù–∞—Ä–æ–¥–Ω—ã–π —Å–ø–æ—Å–æ–± —Ä–µ—à–∏—Ç—å —á—Ç–æ –ª–∏–±–æ, –æ—Ä—ë–ª –∏–ª–∏ —Ä–µ—à–∫–∞?")
    async def heads_or_tail(self, ctx):
        await ctx.response.defer()
        wars = [0, 1]
        wars = random.choice(wars)
        await ctx.send(embed=disnake.Embed(color=0x228b22).set_image(url="https://cdn.glitch.global/5fcfa7e8-8436-4acd-a852-e721cd1b531e/coin-flip-20.gif?v=1669511113445"), delete_after = 23)
        await asyncio.sleep(3)
        if wars == 1:
            return await ctx.edit_original_response(embed=disnake.Embed(title="–≠—Ç–æ –û—Ä—ë–ª!",color=0x228b22).set_image(url="https://w7.pngwing.com/pngs/73/614/png-transparent-double-headed-eagle-gold-coin-gold-gold-coin-gold-material.png"))
        if wars == 0:
            return await ctx.edit_original_response(embed=disnake.Embed(title="–≠—Ç–æ –†–µ—à–∫–∞!",color=0x228b22).set_image(url="https://newcoin.ru/wa-data/public/shop/products/59/08/859/images/3343/3343.970.JPG"))

    @commands.slash_command(name="door",description="–ò–≥—Ä–∞ - –í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–≤–µ—Ä—å!")
    async def door(self, ctx):
        await ctx.response.defer()
        door = random.choice([1,2,3])
        components = disnake.ui.Select(placeholder="–í—ã–±–∏—Ä–∞–π—Ç–µ...", options=[
            disnake.SelectOption(label="1üö™", value = "1", description="–í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–≤—É—é –¥–≤–µ—Ä—å"),
            disnake.SelectOption(label="2üö™", value = "2", description="–í—ã–±—Ä–∞—Ç—å –≤—Ç–æ—Ä—É—é –¥–≤–µ—Ä—å"),
            disnake.SelectOption(label="3üö™", value = "3", description="–í—ã–±—Ä–∞—Ç—å —Ç—Ä–µ—Ç—å—é –¥–≤–µ—Ä—å")
        ])
        await ctx.send(embed=disnake.Embed(title="–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–≤–µ—Ä—å",description="–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–ª–∏ –Ω–µ—Ç, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–≤–æ–µ–π —É–¥–∞—á–∏...",color=0x228b22), components=components, delete_after = 30)
        try:
            slct = await self.bot.wait_for("message_interaction", timeout=20)
            if slct.values[0] == str(door):
                await ctx.edit_original_response(embed=disnake.Embed(title="–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–≤–µ—Ä—å!",description="–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!",color=0x228b22), components=None)
                await slct.response.defer()
            else:
                await ctx.edit_original_response(embed=disnake.Embed(title="–ù–µ –≤–µ—Ä–Ω–æ...",description=f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–≤–µ—Ä—å—é –±—ã–ª–∞ {door}. –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑—ë—Ç!", color=disnake.Color.red()), components=None)
                await slct.response.defer()
        except asyncio.TimeoutError:
            await ctx.edit_original_response(embed=disnake.Embed(title="–¢–∞–π–º–∞—É—Ç –∏—Å—Ç—ë–∫!", color=disnake.Color.red()))

    @commands.slash_command(name="akinator",description="–°—ã–≥—Ä–∞–π—Ç–µ –≤ –∞–∫–∏–Ω–∞—Ç–æ—Ä–∞.")
    async def aki(self, ctx):
        await ctx.response.defer()
        aki = Akinator(
            child_mode=False,
            theme=Theme.from_str('characters')
        )
        first_queston = aki.start_game()
        stats = True
        number = 1
        component = [
            disnake.ui.Button(label="–î–∞",style=disnake.ButtonStyle.success,custom_id="Yes"),
            disnake.ui.Button(label="–ù–µ—Ç",style=disnake.ButtonStyle.danger,custom_id="No"),
            disnake.ui.Button(label="–Ø –Ω–µ –∑–Ω–∞—é",style=disnake.ButtonStyle.blurple,custom_id="Idk"),
            disnake.ui.Button(label="–í–æ–∑–º–æ–∂–Ω–æ", style=disnake.ButtonStyle.success,custom_id="Probably"),
            disnake.ui.Button(label="–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ—Ç",style=disnake.ButtonStyle.danger,custom_id="Probably not"),
            disnake.ui.Button(emoji="üõë", label="–°—Ç–æ–ø", style=disnake.ButtonStyle.danger,custom_id="STOP")
        ]
        def check(msg):
            return msg.author.id == ctx.author.id
        await ctx.send(embed=disnake.Embed(title=f"–í–æ–ø—Ä–æ—Å {number}",description=translator.translate(first_queston, dest="ru").text,color=0x228b22), components=component)
        while aki.progression <= 90 and stats:
            try:

                btn = await bot.wait_for("button_click", check=check, timeout=90)
                if btn.component.custom_id == "STOP":
                    win = aki.win()
                    if not win:
                        stats=False
                        await btn.response.defer()
                        return await ctx.edit_original_response(embed=disnake.Embed(title="–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –∏–≥—Ä—É.",color=disnake.Color.red()),components=None)
                    stats = False
                    await btn.response.defer()

                    return await ctx.edit_original_response(embed=disnake.Embed(title="–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –∏–≥—Ä—É.",description=f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ê–∫–∏–Ω–∞—Ç–æ—Ä —Å—á–∏—Ç–∞–µ—Ç —á—Ç–æ —ç—Ç–æ {translator.translate(win.name, dest='ru').text}!",color=disnake.Color.red()),components=None)

                answer = Answer.from_str(btn.component.custom_id)
                aki.answer(answer)
                number += 1
                await ctx.edit_original_response(embed=disnake.Embed(title=f"–í–æ–ø—Ä–æ—Å {number}",description=translator.translate(aki.question, dest="ru").text, color=0x228b22), components=component)
            except asyncio.TimeoutError:
                win = aki.win()
                stats = False
        win = aki.win()
        if win:
            await ctx.edit_original_response(embed=disnake.Embed(title=f"–≠—Ç–æ {win.name}!",description=f'{translator.translate(win.description, dest="ru")}',color=disnake.Color.red()).set_image(url = win.absolute_picture_path), components=None)
            stats = False

class Moderation(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.slash_command(name="ban", description="–ó–∞–±–∞–Ω–∏—Ç—å –∫–æ–≥–æ –ª–∏–±–æ")
    @commands.has_permissions(ban_members = True)
    @commands.bot_has_permissions(ban_members=True)
    async def ban(self, ctx, member: disnake.Member, reason="–ë—ã–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞."):
        await ctx.response.defer()
        try:
            await member.ban(reason=reason)
        except:
            return await ctx.send(embed=disnake.Embed(title=lang(ctx,"–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—à–∏–±–∫–∞"),description=lang(ctx,"–£ –º–µ–Ω—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤\n–í–æ–∑–º–æ–∂–Ω–∞ –¥—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏."),color=disnake.Color.red()), delete_after = 10)
        await ctx.send(embed=disnake.Embed(title=f"<:correctCheckmark:1047244074350018700> {lang(ctx,'–£—Å–ø–µ—à–Ω–æ')}",description=f"{member.name} {lang(ctx,'—Ç–µ–ø–µ—Ä—å –≤ –±–∞–Ω–µ')}",color=disnake.Color.green()), delete_after = 20)

    @commands.slash_command(name="kick", description="–í—ã–≥–Ω–∞—Ç—å –∫–æ–≥–æ —Å —Å–µ—Ä–≤–µ—Ä–∞.")
    @commands.has_permissions(kick_members = True)
    @commands.bot_has_permissions(kick_members=True)
    async def kick(self, ctx, member: disnake.Member, reason = "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"):
        await ctx.response.defer()
        try:
            await member.kick()
        except:
            return await ctx.send(embed=disnake.Embed(title=lang(ctx,"–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—à–∏–±–∫–∞"),description=lang(ctx,"–£ –º–µ–Ω—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤\n–í–æ–∑–º–æ–∂–Ω–∞ –¥—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞."),color=disnake.Color.red()), delete_after = 10)
        await ctx.send(embed=disnake.Embed(title=f"<:correctCheckmark:1047244074350018700> {lang(ctx,'–£—Å–ø–µ—à–Ω–æ!')}",description=f"{member.mention} {lang(ctx,'–±–æ–ª—å—à–µ –Ω–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!')}", color=disnake.Color.green()), delete_after = 20)

    @commands.slash_command(name="mute",description="–ó–∞–≥–ª—É—à–∏—Ç—å –∫–æ–≥–æ –ª–∏–±–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
    @commands.has_permissions(moderate_members = True)
    @commands.bot_has_permissions(moderate_members=True)
    async def mute(self, ctx, member: disnake.Member, time: int):
        await ctx.response.defer()
        try:
            await member.timeout(duration=datetime.timedelta(minutes=time))
        except:
            return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx,'–û—à–∏–±–∫–∞')}!",description=lang(ctx,"–£ –º–µ–Ω—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤.\n–í–æ–∑–º–æ–∂–Ω–∞ –¥—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞."),color=disnake.Color.red()), delete_after = 10)

        await ctx.send(embed=disnake.Embed(title=f"<:correctCheckmark:1047244074350018700> –£—Å–ø–µ—à–Ω–æ",description=f"–¢–µ–ø–µ—Ä—å {member.name} –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –º—å—é—Ç–µ –Ω–∞ {time} –º–∏–Ω—É—Ç."), delete_after = 20)

    @commands.slash_command(name="warn",description="–í—ã–¥–∞—Ç—å –≤–∞—Ä–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    @commands.has_permissions(moderate_members = True)
    async def warn(self, ctx, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: disnake.Member, –ø—Ä–∏—á–∏–Ω–∞="–Ω–µ —É–∫–∞–∑–∞–Ω–∞"):
        await ctx.response.defer()
        member = –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        reason = –ø—Ä–∏—á–∏–Ω–∞
        special = 0
        with sqlite3.connect("database.db") as db:
            cursor = db.cursor()
            cursor.execute("INSERT INTO warns(guild_id, user_id, reason) VALUES(?, ?, ?)", (ctx.guild.id, member.id, reason))
        with sqlite3.connect("database.db") as db:
            cursor = db.cursor()
            for special_id, guild, user, reas in cursor.execute("SELECT * FROM warns"):
                if user == member.id:
                    special = special_id

        datet = datetime.datetime
        date = datet.utcnow()
        utc_time = calendar.timegm(date.utctimetuple())

        await ctx.send(embed=disnake.Embed(title=f"<:correctCheckmark:1047244074350018700> {lang(ctx,'–£—Å–ø–µ—à–Ω–æ')}",description=f"{lang(ctx,'–í–∞—Ä–Ω —É—Å–ø–µ—à–Ω–æ –Ω–∞–Ω–µ—Å—ë–Ω –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')} {member.mention}!\n{lang(ctx,'–ü—Ä–æ–∏–∑–æ—à–ª–æ —ç—Ç–æ')} <t:{utc_time}:R>").add_field(name=lang(ctx,"–ù–æ–º–µ—Ä —Å–ª—É—á–∞—è"),value=f"{special}"), delete_after = 20)

    @commands.slash_command(name="warns",description="–£–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–Ω–æ–º –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ")
    async def warns(self, ctx):
        await ctx.response.defer()
        message = []
        users = []
        with sqlite3.connect("database.db") as db:
            cursor = db.cursor()
            for special_id, guild, user, reas in cursor.execute("SELECT * FROM warns"):
                if guild == ctx.guild.id:
                    users.append(user)
                    message.append(f"{lang(ctx,'–ù–æ–º–µ—Ä —Å–ª—É—á–∞—è')} - {special_id}:\n{lang(ctx,'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')} - {self.bot.get_user(user).mention}\n{lang(ctx,'–ü—Ä–∏—á–∏–Ω–∞')} - {reas}\n")
        if users == []:
            return await ctx.send(embed=disnake.Embed(title="<:wrongCheckmark:1047244133078675607>–û—à–∏–±–∫–∞",description="–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –µ—â—ë –Ω–µ—Ç –≤–∞—Ä–Ω–æ–≤.",color=disnake.Color.red()), delete_after = 10)
        embed = disnake.Embed(title=lang(ctx,"–í–∞—Ä–Ω —Ç–∞–±–ª–∏—Ü–∞üîç"), description="\n".join(list(map(str, message))))
        await ctx.send(embed=embed, delete_after = 40)

    @commands.slash_command(name="unwarn",description="–°–Ω—è—Ç—å –≤–∞—Ä–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    @commands.has_permissions(moderate_members = True)
    async def unwarn(self,ctx,–Ω–æ–º–µ—Ä_—Å–ª—É—á–∞—è):
        await ctx.response.defer()
        special = –Ω–æ–º–µ—Ä_—Å–ª—É—á–∞—è
        st = False
        try:
            special = int(special)
        except:
            return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx,'–û—à–∏–±–∫–∞')}",description=lang("–ù–æ–º–µ—Ä —Å–ª—É—á–∞—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!"),color=disnake.Color.red()), delete_after = 10)
        try: #–ü—Ä–æ–±—É–µ–º
            with sqlite3.connect("database.db") as db:
                cursor = db.cursor()
                cursor.execute("DELETE FROM warns WHERE special_id = ?", (int(special),)) # –î–∞—ë–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
                await ctx.send(embed=disnake.Embed(title=f"<:correctCheckmark:1047244074350018700> {lang(ctx,'–£—Å–ø–µ—à–Ω–æ')}",description=lang(ctx,f"–ù–æ–º–µ—Ä —Å–ª—É—á–∞—è {special} –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"),color=0x228b22), delete_after = 20)
        except sqlite3.Error:
            return await ctx.send(lang(ctx,"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–ª—É—á–∞—è!"), delete_after = 10)

    @commands.slash_command(name="purge",description="–û—á–∏—Å—Ç–∏—Ç—å –∫–∞–Ω–∞–ª")
    @commands.has_permissions(manage_messages=True)
    @commands.bot_has_permissions(manage_messages=True)
    async def purg(self, ctx, count: int = commands.Param(description="–°–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π —É–¥–∞–ª–∏—Ç—å?")):
        await ctx.response.defer()
        await ctx.channel.purge(limit=int(count))
        await ctx.channel.send(f"<:correctCheckmark:1047244074350018700> {lang(ctx,f'–£—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–π!')}", delete_after = 20)


class Utils(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.slash_command(name="profile",description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    async def profile(self, ctx, member: disnake.Member = None):
        await ctx.response.defer()
        if not member:
            member = ctx.author
        scopes = 0
        try:
            scopes = Memory.read(f"scope/{member.id}balls.txt")
        except:
            scopes = 0
        balance = 0
        users = None
        with sqlite3.connect("database.db") as db:
            cursor = db.cursor()
            for guild, user, bal in cursor.execute("SELECT * FROM balances"):
                if guild == ctx.guild.id:
                    if user == member.id:
                        users = user
                        balance = bal
        if not users:
            with sqlite3.connect("database.db") as db:
                cursor = db.cursor()
                cursor.execute("INSERT INTO balances VALUES(?, ?, ?)", (ctx.guild.id, member.id, 0))
            balance = 0
        if not balance:
            balance = 0
        t = member.status
        if t == disnake.Status.online:
            d = "–í —Å–µ—Ç–∏"

        t = member.status
        if t == disnake.Status.offline:
            d = "–ù–µ –≤ —Å–µ—Ç–∏"

        t = member.status
        if t == disnake.Status.idle:
            d = "–ù–µ –∞–∫—Ç–∏–≤–µ–Ω"

        t = member.status
        if t == disnake.Status.dnd:
            d = "–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å"

        img = Image.new('RGBA', (1000, 340), '#000000')
        backgr = ["https://cdn.glitch.global/5fcfa7e8-8436-4acd-a852-e721cd1b531e/1614397342_47-p-temnii-multyashnii-fon-64.png?v=1670188383348","https://cdn.glitch.global/5fcfa7e8-8436-4acd-a852-e721cd1b531e/1622768497_26-phonoteka_org-p-noch-art-minimalizm-krasivo-28.png?v=1670188403979","https://cdn.glitch.global/5fcfa7e8-8436-4acd-a852-e721cd1b531e/i.png?v=1670188415480"]
        r = requests.get(random.choice(backgr), stream = True)
        r = Image.open(io.BytesIO(r.content))
        r = r.convert("RGBA")
        r = r.resize((1000, 340))
        img.paste(r, (0, 0, 1000, 340))
        url = str(member.avatar.url)
        r = requests.get(url, stream = True)
        r = Image.open(io.BytesIO(r.content))
        r = r.convert('RGBA')
        r = r.resize((200, 200))
        img.paste(r, (30, 30, 230, 230))
        idraw = ImageDraw.Draw(img)
        name = member.name
        headline = ImageFont.truetype('gagalin.otf', size = 60)
        undertext = ImageFont.truetype('gagalin.otf', size = 36)
        idraw.text((250, 30), f'{name}', font=headline, fill="#ffffff")
        idraw.text((250, 100), f'#{member.discriminator}', font=undertext, fill="#ffffff")
        idraw.text((250, 140), f'ID: \n{member.id}', font = undertext, fill="#ffffff")
        idraw.text((250, 220), f'–°—Ç–∞—Ç—É—Å: {d}', font = undertext, fill="#ffffff")
        idraw.text((250, 260), f"–ö–æ–ª-–≤–æ –æ—á–∫–æ–≤: {scopes}", font = undertext, fill="#ffffff")
        idraw.text((250, 300), f"–ë–∞–ª–∞–Ω—Å: {int(balance)}", font=undertext, fill="#ffffff")
        idraw.text((20, 290), f'{self.bot.user.name} Draw\'s', font=undertext, fill="#ffffff")
        img.save('user_card.png')
        await ctx.send(file=disnake.File("user_card.png"), delete_after = 50)

    @commands.slash_command(name="jacque",description="–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –î–∂–∞–∫ –§—Ä—ç—Å–∫–æ")
    async def jacque(self, ctx, —Ç–µ–∫—Å—Ç = commands.Param(description="–ß—Ç–æ –±—É–¥–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –î–∂–∞–∫ –§—Ä—ç—Å–∫–æ?")):
        await ctx.response.defer()
        cent = 480 / 2
        cent = cent / len(—Ç–µ–∫—Å—Ç)
        try:
            img = Image.new("RGBA", (480, 270), "#000000")
            r = requests.get("https://cdn.glitch.global/5fcfa7e8-8436-4acd-a852-e721cd1b531e/imgonline-com-ua-convertH9QmkkWjlGPN.jpg?v=1671019870556", stream=True)
            r = Image.open(io.BytesIO(r.content))
            r = r.convert("RGBA")
            img.paste(r, (0,0,480,270))
            draw = ImageDraw.Draw(img)
            font = ImageFont.truetype("ComicSans.ttf", size=20)
            draw.text((cent,135), f"{—Ç–µ–∫—Å—Ç}", font=font, fill="#000000")
            draw.text((10, 240), f"{self.bot.user.name} Draw\'s", font=font, fill="#000000")
            img.save("jacque.png")
        except:
            return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx,'–û—à–∏–±–∫–∞')}",description=lang(ctx,"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."),color=disnake.Color.red()), delete_after = 10)
        await ctx.send(file=disnake.File("jacque.png"), delete_after = 50)

    @commands.slash_command(name="passed", description="–î–µ–ª–∞–µ—Ç –≤–∞—à—É –∞–≤–∞—Ç–∞—Ä–∫—É –≤ —Å—Ç–∏–ª—å GTA, –º–∏—Å—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    async def passed(self, ctx, —É—á–∞—Å—Ç–Ω–∏–∫: disnake.Member = None):
        member = —É—á–∞—Å—Ç–Ω–∏–∫
        if not member:
            member = ctx.author
        await ctx.response.defer()
        request = requests.get(f"https://some-random-api.ml/canvas/overlay/passed?avatar={member.avatar.url}")
        json_load = request.url
        await ctx.send(embed=disnake.Embed(title=lang(ctx,"üîç–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏")).set_image(url=json_load), delete_after = 20)

    @commands.slash_command(name="wasted", description="–î–µ–ª–∞–µ—Ç –≤–∞—à—É –∞–≤–∞—Ç–∞—Ä–∫—É –≤ —Å—Ç–∏–ª—å GTA, –º–∏—Å—Å–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞")
    async def wasted(self, ctx, —É—á–∞—Å—Ç–Ω–∏–∫: disnake.Member = None):
        member = —É—á–∞—Å—Ç–Ω–∏–∫
        if not member:
            member = ctx.author
        await ctx.response.defer()
        request = requests.get(f"https://some-random-api.ml/canvas/overlay/wasted?avatar={member.avatar.url}")
        json_load = request.url
        await ctx.send(embed=disnake.Embed(title=lang(ctx,"üîç–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏")).set_image(url=json_load), delete_after = 20)

    @commands.slash_command(name="lgbt", description="–î–µ–ª–∞–µ—Ç –≤–∞–º –õ–ì–ë–¢ –∞–≤–∞—Ç–∞—Ä–∫—É")
    async def lgbt(self, ctx, —É—á–∞—Å—Ç–Ω–∏–∫: disnake.Member = None):
        member = —É—á–∞—Å—Ç–Ω–∏–∫
        if not member:
            member = ctx.author
        await ctx.response.defer()
        request = requests.get(f"https://some-random-api.ml/canvas/overlay/gay?avatar={member.avatar.url}")
        json_load = request.url
        await ctx.send(embed=disnake.Embed(title=lang(ctx,"üîç–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏")).set_image(url=json_load), delete_after = 20)

    @commands.slash_command(name="jail", description="–î–µ–ª–∞–µ—Ç –≤–∞–º –∞–≤–∞—Ç–∞—Ä–∫—É, –±—É–¥—Ç–æ –≤—ã –≤ —Ç—é—Ä—å–º–µ")
    async def jail(self, ctx, —É—á–∞—Å—Ç–Ω–∏–∫: disnake.Member = None):
        member = —É—á–∞—Å—Ç–Ω–∏–∫
        if not member:
            member = ctx.author
        await ctx.response.defer()
        request = requests.get(f"https://some-random-api.ml/canvas/overlay/jail?avatar={member.avatar.url}")
        json_load = request.url
        await ctx.send(embed=disnake.Embed(title=lang(ctx,"üîç–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏")).set_image(url=json_load), delete_after = 20)

    @commands.slash_command(name="ussr", description="–ü–µ—Ä–µ–¥–µ–ª—ã–≤–∞–µ—Ç –≤–∞—à—É –∞–≤–∞—Ç–∞—Ä–∫—É –≤ —Å—Ç–∏–ª–µ –°–°–°–†")
    async def ussr(self, ctx, —É—á–∞—Å—Ç–Ω–∏–∫: disnake.Member = None):
        member = —É—á–∞—Å—Ç–Ω–∏–∫
        if not member:
            member = ctx.author
        await ctx.response.defer()
        request = requests.get(f"https://some-random-api.ml/canvas/overlay/comrade?avatar={member.avatar.url}")
        json_load = request.url
        await ctx.send(embed=disnake.Embed(title=lang(ctx,"üîç–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏")).set_image(url=json_load), delete_after = 20)

    @commands.slash_command(name="triggered", description="–î–µ–ª–∞–µ—Ç –≥–∏—Ñ–∫—É –≤–∞—à–µ–π –∞–≤–∞—Ç–∞—Ä–∫–∏ –≤ —Å—Ç–∏–ª–µ TRIGGERED")
    async def triggered(self, ctx, —É—á–∞—Å—Ç–Ω–∏–∫: disnake.Member = None):
        member = —É—á–∞—Å—Ç–Ω–∏–∫
        if not member:
            member = ctx.author
        await ctx.response.defer()
        request = requests.get(f"https://some-random-api.ml/canvas/overlay/triggered?avatar={member.avatar.url}")
        json_load = request.url
        await ctx.send(embed=disnake.Embed(title=lang(ctx,"üîç–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏")).set_image(url=json_load), delete_after = 20)

    @commands.slash_command(name="pixelate",description="–ü–∏–∫—Å–∏–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –∞–≤–∞—Ç–∞—Ä")
    async def pixelate(self, ctx, —É—á–∞—Å—Ç–Ω–∏–∫: disnake.Member = None):
        member = —É—á–∞—Å—Ç–Ω–∏–∫
        if not member:
            member = ctx.author
        await ctx.response.defer()
        request = requests.get(f"https://some-random-api.ml/canvas/misc/pixelate?avatar={member.avatar.url}")
        await ctx.send(embed=disnake.Embed(title=lang(ctx,"üîç–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏")).set_image(url=request.url), delete_after = 20)

    @commands.slash_command(name="youtube-comment",description="–î–µ–ª–∞–µ—Ç –≤ —Å—Ç–∏–ª–µ –≤–∞—Å –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π —Å —é—Ç—É–±–∞")
    async def comment(self, ctx, –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π, –Ω–∏–∫, –∞–≤–∞—Ç–∞—Ä: disnake.Member = commands.Param(description="–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å –∫–∞–∫–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –±—É–¥–µ—Ç –≤–∑—è—Ç –∞–≤–∞—Ç–∞—Ä")):
        avatar = –∞–≤–∞—Ç–∞—Ä
        nick = –Ω–∏–∫
        if not avatar:
            avatar = ctx.author
        await ctx.response.defer()
        comment = –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π
        request = requests.get(f"https://some-random-api.ml/canvas/misc/youtube-comment?avatar={avatar.avatar.url}&username={nick}&comment={comment}")
        await ctx.send(embed=disnake.Embed(title=lang(ctx,"üîç–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏")).set_image(url=request.url), delete_after = 50)

    @commands.slash_command(name="voice",description="–°–æ–∑–¥–∞—Ç—å –æ–∑–≤—É—á–∫—É")
    async def voice(self, ctx, —Ç–µ–∫—Å—Ç = commands.Param(description="üîç –ö–∞–∫–æ–π —Ç–µ–∫—Å—Ç –æ–∑–≤—É—á–∏—Ç—å?")):
        text = —Ç–µ–∫—Å—Ç
        tts = gTTS(text=text, lang="ru")
        tts.save("voice.mp3")
        await ctx.send(lang(ctx,"üîç–†–µ–∑—É–ª—å—Ç–∞—Ç"),file=disnake.File("voice.mp3"), delete_after = 50)

    @commands.slash_command(name="encode",description="–ù–∞–¥–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ base64? –õ–µ–≥–∫–æ!")
    async def encode(self, ctx, —Ç–µ–∫—Å—Ç = commands.Param(description="–¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å")):
        request = requests.get(f"https://some-random-api.ml/others/base64?encode={—Ç–µ–∫—Å—Ç}")
        json_load = json.loads(request.text)
        await ctx.send(embed=disnake.Embed(title=lang(ctx,"üîç–†–µ–∑—É–ª—å—Ç–∞—Ç"),description=json_load["base64"],color=0x228b22), delete_after = 20)

    @commands.slash_command(name="decode",description="–ù–∞–¥–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ base64? –õ–µ–≥–∫–æ!")
    async def decode(self, ctx, —Ç–µ–∫—Å—Ç = commands.Param(description="–¢–µ–∫—Å—Ç base64")):
        request = requests.get(f"https://some-random-api.ml/others/base64?decode={—Ç–µ–∫—Å—Ç}")
        json_load = json.loads(request.text)
        await ctx.send(embed=disnake.Embed(title=lang(ctx,"üîç–†–µ–∑—É–ª—å—Ç–∞—Ç"),description=json_load["text"],color=0x228b22), delete_after = 20)

    @commands.slash_command(name="joke",description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —à—É—Ç–∫—É")
    async def joke(self, ctx, —è–∑—ã–∫ = commands.Param(default="ru", description="–ù–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —à—É—Ç–∫—É?", choices = [disnake.OptionChoice("–†—É—Å—Å–∫–∏–π","ru"),disnake.OptionChoice("English","en"),disnake.OptionChoice("–£–∫—Ä–∞i–Ω—å—Å–∫–∞","uk")])):
        await ctx.response.defer()
        api_result = requests.get("https://some-random-api.ml/others/joke")
        results = json.loads(api_result.text)
        text = translator.translate(results["joke"], dest=—è–∑—ã–∫)
        await ctx.send(embed=disnake.Embed(title=f"{text.text}",description=lang(ctx,"–®—É—Ç–∫–∞ –≤–∑—è—Ç–∞ —Å —Å–∞–π—Ç–∞ **None**")), delete_after = 20)

    @commands.slash_command(name="poll",description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ.")
    async def poll(self, ctx, –∑–∞–≥–æ–ª–æ–≤–æ–∫, sel1, sel2, sel3 = None, sel4 = None, sel5 = None, sel6 = None, sel7 = None, sel8 = None, sel9 = None, sel10 = None):
        await ctx.response.defer()
        args_do = [sel1, sel2, sel3, sel4, sel5,sel6,sel7,sel8,sel9,sel10]
        text = []
        emojis = ["1Ô∏è‚É£","2Ô∏è‚É£","3Ô∏è‚É£","4Ô∏è‚É£","5Ô∏è‚É£","6Ô∏è‚É£","7Ô∏è‚É£","8Ô∏è‚É£","9Ô∏è‚É£","üîü"]
        count = 1
        lis_count = 0
        for arg in args_do:
            if arg:
                text.append(f"{count}. {arg}")
                count += 1
                lis_count += 1
        text_af = "\n".join(list(map(str, text)))
        msg = await ctx.send(embed=disnake.Embed(title=lang(ctx,f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏"),description=lang(ctx,"–Ø –ø–æ—Å—Ç–∞–≤–ª—é –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–π –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"), color=0x228b22))
        try:
            def check(msg):
                return msg.guild.id == ctx.guild.id and msg.author.id == ctx.author.id
            msg = await self.bot.wait_for("message", check=check, timeout=60)
            await ctx.edit_original_response(embed=disnake.Embed(title=–∑–∞–≥–æ–ª–æ–≤–æ–∫,description=text_af,color=0x228b22))
            if lis_count >= 1: await msg.add_reaction("1Ô∏è‚É£")
            if lis_count >= 2: await msg.add_reaction("2Ô∏è‚É£")
            if lis_count >= 3: await msg.add_reaction("3Ô∏è‚É£")
            if lis_count >= 4: await msg.add_reaction("4Ô∏è‚É£")
            if lis_count >= 5: await msg.add_reaction("5Ô∏è‚É£")
            if lis_count >= 6: await msg.add_reaction("6Ô∏è‚É£")
            if lis_count >= 7: await msg.add_reaction("7Ô∏è‚É£")
            if lis_count >= 8: await msg.add_reaction("8Ô∏è‚É£")
            if lis_count >= 9: await msg.add_reaction("9Ô∏è‚É£")
            if lis_count >= 10: await msg.add_reaction("üîü")
        except asyncio.TimeoutError:
            await ctx.edit_original_response(embed=disnake.Embed(title=lang(ctx,"–í—ã —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ!"),description=f"<:wrongCheckmark:1047244133078675607>{lang(ctx,'–û—à–∏–±–∫–∞')}",color=disnake.Color.red()))

    @commands.slash_command(name="random",description="–•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ —Ç–æ —Ä–∞–Ω–¥–æ–º–Ω–æ–µ? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É!")
    async def rando(self, ctx, –≤–∞—Ä–∏–∞—Ü–∏–∏ = commands.Param(description="–£–∫–∞–∂–∏—Ç–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")):
        select = random.choice(–≤–∞—Ä–∏–∞—Ü–∏–∏.split())
        await ctx.response.defer()
        await ctx.send(embed=disnake.Embed(title=lang(ctx,"–Ø –≤—ã–±–∏—Ä–∞—é..."), color=0x228b22))
        await asyncio.sleep(3)
        await ctx.edit_original_response(embed=disnake.Embed(title=lang(ctx,"–Ø –≤—ã–±–∏—Ä–∞—é"),description=select + "!",color=0x228b22), delete_after = 20)

    @commands.slash_command(name="donate",description="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞")
    async def donate(self, ctx):
        await ctx.send(embed=disnake.Embed(title=lang(ctx,"–ú—ã –±—É–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –¥–∞–∂–µ 10 —Ä—É–±–ª—è–º!"),description=f"DonationAlerts - [**–Ω–∞–∂–º–∏—Ç–µ**](https://www.donationalerts.com/r/tjma)\n{lang(ctx,'–í–æ–∑–º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –Ω–∞—à —Å–∞–π—Ç.')}",color=0x228b22), ephemeral=True)

    @commands.slash_command(name="quote",description="–¶–∏—Ç–∞—Ç—ã—ã—ã –≤–µ–ª–∏–∫–∏–∏–∏—Ö –ª—é–¥–µ–µ–π")
    async def quote(self, ctx):
        await ctx.response.defer()
        r = requests.get("https://some-random-api.ml/animu/quote")
        r = json.loads(r.text)["sentence"]
        await ctx.send(embed=disnake.Embed(title=lang(ctx,"–¶–∏—Ç–∞—Ç–∞"),description=lang(ctx,r),color=0x228b22))

    @commands.slash_command(name="send",description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á—Ç–æ —Ç–æ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞")
    async def sen(self, ctx, —Ç–µ–∫—Å—Ç = commands.Param(description="–ß—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º?")):
        await ctx.channel.send(—Ç–µ–∫—Å—Ç)
        await ctx.send("<:correctCheckmark:1047244074350018700>",ephemeral=True)

    @commands.slash_command(name="animego",description="–ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ-—Ñ–∏–ª—å–º–æ–≤ –Ω–∞ animego.net")
    async def anigo(self, ctx, –Ω–∞–∑–≤–∞–Ω–∏–µ = commands.Param(description="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∞–Ω–∏–º–µ")):
        await ctx.response.defer()
        name = –Ω–∞–∑–≤–∞–Ω–∏–µ
        title = None
        uri = None
        description = None
        img = None
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"https://animego.org/search/all?q={name}", headers={"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 YaBrowser/22.11.5.715 Yowser/2.5 Safari/537.36"}) as response:
                    r = await aiohttp.StreamReader.read(response.content)
                    soup = BS(r, "html.parser")
                    item = soup.find_all("div", {"class": "h5 font-weight-normal mb-2 card-title text-truncate"})
                    title = item[0].find("a").text.strip()
                    uri = item[0].find("a").get("href")
                async with session.get(uri, headers={"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 YaBrowser/22.11.5.715 Yowser/2.5 Safari/537.36"}) as response:
                    r = await aiohttp.StreamReader.read(response.content)
                    soup = BS(r, "html.parser")
                    description = soup.find("div", {"class": "description pb-3"}).text.strip()
                    img = soup.find("div", {"class": "anime-poster position-relative cursor-pointer"})
                    img = img.find("img").get("src")
        except IndexError:
            return await ctx.send(f"<:wrongCheckmark:1047244133078675607> {lang(ctx, f'–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–Ω–∏–º–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º {name}')}")
        await ctx.send(embed=disnake.Embed(
            title = lang(ctx, title),
            description = lang(ctx, description) + f"\n\n[**{lang(ctx, '–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞')}**]({uri})",
            color = 0x228b22
        ).set_thumbnail(url = img), delete_after = 30)


class BotSettings(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @commands.slash_command(name="set-welcome-channel", description="[–ê–î–ú–ò–ù] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    @commands.has_permissions(manage_guild = True)
    async def welcome_channel(self, ctx, –∫–∞–Ω–∞–ª: disnake.TextChannel):
        await ctx.response.defer()
        channel = –∫–∞–Ω–∞–ª
        try:
            message = await channel.send("https://tenor.com/view/harry-potter-funny-harrypotter-voldemort-gif-19286790")
        except:
            return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx, '–û—à–∏–±–∫–∞')}",description=lang(ctx, "–ö–∞–∂–µ—Ç—å—Å—è, —è –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª"),color=disnake.Color.red()), delete_after = 10)
        else:
            await message.delete()
        try:
            Memory.write(f"channels/{ctx.guild.id}welcomechannel.txt", channel.id)
        except:
            return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx, '–û—à–∏–±–∫–∞')}",description=lang(ctx, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –∫–∞–Ω–∞–ª –≤ –ø–∞–º—è—Ç—å\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä –∑–∞ –ø–æ–º–æ—â—å—é."), color=disnake.Color.red()), delete_after = 10)
        await ctx.send(embed=disnake.Embed(title=f"<:correctCheckmark:1047244074350018700> {lang(ctx, '–£—Å–ø–µ—à–Ω–æ')}",description=lang(ctx, f"–¢–µ–ø–µ—Ä—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—à–µ–¥—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ <#{channel.id}>"),color=0x228b22), delete_after = 20)

    @commands.slash_command(name="set-bye-channel", description="[–ê–î–ú–ò–ù] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ—â–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    @commands.has_permissions(manage_guild = True)
    async def bye_channel(self, ctx, –∫–∞–Ω–∞–ª: disnake.TextChannel):
        await ctx.response.defer()
        channel = –∫–∞–Ω–∞–ª

        try:
            message = await channel.send("https://tenor.com/view/harry-potter-funny-harrypotter-voldemort-gif-19286790")
        except:
            return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx, '–û—à–∏–±–∫–∞')}",description=lang(ctx, "–ö–∞–∂–µ—Ç—å—Å—è, —è –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª"),color=disnake.Color.red()), delete_after = 10)
        else:
            await message.delete()
        try:
            Memory.write(f"channels/{ctx.guild.id}byechannel.txt", channel.id)
        except:
            return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx, '–û—à–∏–±–∫–∞')}",description=lang(ctx, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –∫–∞–Ω–∞–ª –≤ –ø–∞–º—è—Ç—å\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä –∑–∞ –ø–æ–º–æ—â—å—é."), color=disnake.Color.red()), delete_after = 10)
        await ctx.send(embed=disnake.Embed(title=f"<:correctCheckmark:1047244074350018700> {lang(ctx, '–£—Å–ø–µ—à–Ω–æ')}",description=lang(ctx, f"–¢–µ–ø–µ—Ä—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —É—à–µ–¥—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ <#{channel.id}>"),color=0x228b22), delete_after = 20)

    @commands.slash_command(name="set-daily",description="[–ê–î–ú–ò–ù] –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å")
    @commands.has_permissions(manage_guild = True)
    async def set_daily(self, ctx, —Å—É–º–º–∞):
        await ctx.response.defer()
        summ = —Å—É–º–º–∞
        try:
            summ = int(summ)
        except:
            return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx, '–û—à–∏–±–∫–∞')}",description=lang(ctx, "–í—ã —É–∫–∞–∑–∞–ª–∏ **–ù–ï** —á–∏—Å–ª–æ"), color=disnake.Color.red()), delete_after = 10)
        try:
            Memory.write(f"daily/{ctx.guild.id}summ-of-daily.txt", str(summ))
        except:
            return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx, '–û—à–∏–±–∫–∞')}",description=lang(ctx, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —á–∏—Å–ª–æ –≤ –ø–∞–º—è—Ç—å."),color=disnake.Color.red()), delete_after = 10)

        await ctx.send(embed=disnake.Embed(title=f"<:correctCheckmark:1047244074350018700> {lang(ctx, '–£—Å–ø–µ—à–Ω–æ')}",description=lang(ctx, "–¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –ø–æ –∏—Ö–Ω–µ–º—É –∂–µ–ª–∞–Ω–∏—é –±—É–¥–µ—Ç –¥–∞–≤–∞—Ç—å—Å—è —ç—Ç–∞ —Å—É–º–º–∞.")), delete_after = 20)

    @commands.slash_command(name="set-anti-badwords",description="–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–¥—ã –∑–∞ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞.")
    @commands.has_permissions(manage_guild = True)
    async def set_anti_badwords(self, ctx):
        await ctx.response.defer()
        if not ctx.guild:
            return await ctx.send(lang(ctx, "–£–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç—ã: –Ø –Ω–µ –º–æ–≥—É –≤–∫–ª—é—á–∏—Ç—å –ø–æ–∏—Å–∫ –ø–ª–æ—Ö–∏—Ö —Å–ª–æ–≤ –≤ –õ–°."),ephemeral=True)

        Memory.write(f"badwords/{ctx.guild.id}.txt", "you")
        await ctx.send(embed=disnake.Embed(title=f"<:correctCheckmark:1047244074350018700> {lang(ctx, '–£—Å–ø–µ—à–Ω–æ')}",description=lang(ctx, "–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∑–∞ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞ –±—É–¥—É—Ç –≤—ã–¥–∞–≤–∞—Ç—å—Å—è –ø—Ä–µ–¥—ã."),color=0x228b22), delete_after = 20)

    @commands.slash_command(name="set-work-price",description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª—É—á–∞–µ–º—É—é —Å—É–º–º—É –∑–∞ —Ä–∞–±–æ—Ç—É, 0 –µ—Å–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å")
    @commands.has_permissions(manage_guild = True)
    async def set_work_price(self, ctx, —Å—É–º–º–∞: int = commands.Param(description="–ö–∞–∫—É—é —Å—É–º–º—É –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∏?")):
        await ctx.response.defer()
        Memory.write(f"works/{ctx.guild.id}.txt", —Å—É–º–º–∞)
        await ctx.send(embed=disnake.Embed(title=f"<:correctCheckmark:1047244074350018700> {lang(ctx, '–£—Å–ø–µ—à–Ω–æ')}",description=lang(ctx, "–¢–µ–ø–µ—Ä—å –∑–∞ —Ä–∞–±–æ—Ç—É –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å—Å—è —ç—Ç–∞ —Å—É–º–º–∞.")), delete_after = 20)



    @commands.slash_command(name="disable-set", description="[–ê–î–ú–ò–ù] –û—Ç–∫–ª—é—á–∏—Ç—å –∫–∞–∫–∏–µ –ª–∏–±–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
    @commands.has_permissions(manage_guild = True)
    async def disable_sets(self, ctx, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ = commands.Param(description="–£–∫–∞–∂–∏—Ç–µ, –∫–∞–∫—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –Ω–∞–¥–æ –æ—Ç–∫–ª—é—á–∏—Ç—å", choices=[disnake.OptionChoice(name="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∑–∞—à–µ–¥—à–∏—Ö",value="welcome_messages"),disnake.OptionChoice(name="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—à–µ–¥—à–∏—Ö",value="bye_messages"),disnake.OptionChoice(name="–í–∞—Ä–Ω—ã –∑–∞ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞",value="badwords")])):
        await ctx.response.defer()
        setting = –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
        if setting == "welcome_messages":
            if os.path.isfile(f"channels/{ctx.guild.id}welcomechannel.txt"):
                os.remove(f"channels/{ctx.guild.id}welcomechannel.txt")
            else:
                return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx, '–û—à–∏–±–∫–∞')}",description=lang(ctx, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏—à–µ–¥—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö —É–∂–µ –±—ã–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã."), color=disnake.Color.red()), delete_after = 10)
            await ctx.send(embed=disnake.Embed(title=f"<:correctCheckmark:1047244074350018700> {lang(ctx, '–£—Å–ø–µ—à–Ω–æ')}",description=lang(ctx, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –ø—Ä–∏—à–µ–¥—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å."), color=0x228b22), delete_after = 20)
        if setting == "bye_messages":
            if os.path.isfile(f"channels/{ctx.guild.id}byechannel.txt"):
                os.remove(f"channels/{ctx.guild.id}byechannel.txt")
            else:
                return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx, '–û—à–∏–±–∫–∞')}",description=lang(ctx, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—à–µ–¥—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö —É–∂–µ –±—ã–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã."), color=disnake.Color.red()), delete_after = 10)
            await ctx.send(embed=disnake.Embed(title=f"<:correctCheckmark:1047244074350018700> {lang(ctx, '–£—Å–ø–µ—à–Ω–æ')}",description=lang(ctx, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—à–µ–¥—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å."), color=0x228b22), delete_after = 20)
        if setting == "badwords":
            if os.path.isfile(f"badwords/{ctx.guild.id}.txt"):
                os.remove(f"badwords/{ctx.guild.id}.txt")
            else:
                return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx, '–û—à–∏–±–∫–∞')}",description=lang(ctx, "–í–∞—Ä–Ω—ã –∑–∞ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞ —É–∂–µ –±—ã–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã."), color=disnake.Color.red()), delete_after = 10)
            await ctx.send(embed=disnake.Embed(title=f"<:correctCheckmark:1047244074350018700> {lang(ctx, '–£—Å–ø–µ—à–Ω–æ')}",description=lang(ctx, f"–í–∞—Ä–Ω—ã –∑–∞ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –≤—ã–¥–∞–≤–∞—Ç—å—Å—è."), color=0x228b22), delete_after = 20)



class Economy(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.slash_command(name="balance",description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å")
    async def balance(self, ctx, member: disnake.Member = None):
        await ctx.response.defer()
        if not member: member = ctx.author
        users = 0
        bals = 0
        with sqlite3.connect("database.db") as db:
            cursor = db.cursor()
            for guild, user, bal in cursor.execute("SELECT * FROM balances"):
                if guild == ctx.guild.id:
                    if user == member.id:
                        users = user
                        bals = bal

        if not users:
            with sqlite3.connect("database.db") as db:
                cursor = db.cursor()
                cursor.execute("INSERT INTO balances VALUES(?, ?, ?)", (ctx.guild.id, member.id, 0))
            bals = 0
        if not bals:
            bals = 0

        await ctx.send(embed=disnake.Embed(title=f"{lang(ctx, '–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')} **{member.name}**",description=f"{lang(ctx, '–ë–∞–ª–∞–Ω—Å')}: **{bals}**<:dollar:1051974269296451684>",color=0x228b22), delete_after = 20)

    @commands.slash_command(name="work",description="–ü–æ–π—Ç–∏ —Ä–∞–±–æ—Ç–∞—Ç—å")
    @commands.cooldown(1, 120, commands.BucketType.user)
    async def work(self, ctx):
        await ctx.response.defer()
        work_price = 0
        try:
            work_price = Memory.read(f"works/{ctx.guild.id}.txt")
        except:
            return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx, '–û—à–∏–±–∫–∞')}",description=lang(ctx, "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ü–µ–Ω—É, –∞ –¥–ª—è –º–µ–Ω—è —ç—Ç–æ –∑–Ω–∞—á–∏—Ç —á—Ç–æ –æ–Ω–∏ –æ—Ç–∫–ª—é—á–∏–ª–∏ —ç–∫–æ–Ω–æ–º–∏–∫—É\n–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —ç–∫–æ–Ω–æ–º–∏–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–π —Å–µ—Ä–≤–µ—Ä–∞"),color=disnake.Color.red()), delete_after = 10)
        work_price = int(work_price)
        if work_price == 0:
            return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx, '–û—à–∏–±–∫–∞')}",description=lang(ctx, "–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∞."),color=disnake.Color.red()), delete_after = 10)
        await ctx.send(embed=disnake.Embed(title=lang(ctx, "–†–∞–±–æ—Ç–∞–µ–º..."),color=0x228b22), delete_after = 30)
        await asyncio.sleep(10)
        with sqlite3.connect("database.db") as db:
            cursor = db.cursor()
            cursor.execute("UPDATE balances SET user_balance = user_balance + ? WHERE guild_id = ? AND user_id = ?", (work_price, ctx.guild.id, ctx.author.id))
        await ctx.edit_original_response(embed=disnake.Embed(title=f"<:correctCheckmark:1047244074350018700> {lang(ctx, '–£—Å–ø–µ—à–Ω–æ')}",description=f"{lang(ctx, f'–í—ã –ø–æ–ª—É—á–∏–ª–∏ {work_price}')}<:dollar:1051974269296451684>",color=0x228b22))

    @commands.slash_command(name="daily",description="–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞")
    @commands.cooldown(1, 72000, commands.BucketType.user)
    async def daily(self, ctx):
        await ctx.response.defer()
        summ = 0
        work_price = 0
        try:
            summ = Memory.read(f"daily/{ctx.guild.id}summ-of-daily.txt")
        except:
            return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>–û—à–∏–±–∫–∞",description=lang(ctx, "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ —É–∫–∞–∑—ã–≤–∞–ª–∏ —Å—É–º–º—É –Ω–∏ —Ä–∞–∑—É, –∏ –¥–∞ –±—ã –Ω–µ —Å–æ–∑–¥–∞—Ç—å –∏–º –ø—Ä–æ–±–ª–µ–º, —è –≤–∞–º –æ—Ç–∫–∞–∂—É."),color=disnake.Color.red()), delete_after = 10)
        try:
            work_price = Memory.read(f"works/{ctx.guild.id}.txt")
        except:
            return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>–û—à–∏–±–∫–∞",description="–ù–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∞"), delete_after = 10)
        summ = int(summ)
        if summ == 0:
            return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>–û—à–∏–±–∫–∞",description="–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",color=disnake.Color.red()), delete_after = 10)
        with sqlite3.connect("database.db") as db:
            cursor = db.cursor()
            cursor.execute("UPDATE balances SET user_balance = user_balance + ? WHERE guild_id = ? AND user_id = ?", (summ, ctx.guild.id, ctx.author.id))
        await ctx.send(embed=disnake.Embed(title=f"<:correctCheckmark:1047244074350018700> –£—Å–ø–µ—à–Ω–æ",description="–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å, —Å–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —á–µ—Ä–µ–∑ 72000 —Å–µ–∫—É–Ω–¥(20—á)!",color=0x228b22), delete_after = 20)

    @commands.slash_command(name="add-money", description="–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ —Å—á—ë—Ç –∫–∞–∫–æ–≥–æ –ª–∏–±–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    @commands.has_permissions(moderate_members = True)
    async def add_money(self, ctx, —É—á–∞—Å—Ç–Ω–∏–∫: disnake.Member, —Å—É–º–º–∞: int):
        await ctx.response.defer()
        summ = 0
        with sqlite3.connect("database.db") as db:
            cursor = db.cursor()
            cursor.execute("UPDATE balances SET user_balance = user_balance + ? WHERE guild_id = ? AND user_id = ?", (—Å—É–º–º–∞, ctx.guild.id, —É—á–∞—Å—Ç–Ω–∏–∫.id))
            for guild, user, suma in cursor.execute("SELECT * FROM balances WHERE guild_id = ? AND user_id = ?", (ctx.guild.id, —É—á–∞—Å—Ç–Ω–∏–∫.id)):
                if guild == ctx.guild.id:
                    if user == —É—á–∞—Å—Ç–Ω–∏–∫.id:
                        summ = suma

        await ctx.send(embed=disnake.Embed(title=f"<:correctCheckmark:1047244074350018700> –£—Å–ø–µ—à–Ω–æ",description=f"–¢–µ–ø–µ—Ä—å —É —É—á–∞—Å—Ç–Ω–∏–∫–∞ {summ} <:dollar:1051974269296451684>!",color=0x228b22), delete_after = 20)

    @commands.slash_command(name="reduce-money", description="–£–±–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏ —Å–æ —Å—á—ë—Ç–∞ –∫–∞–∫–æ–≥–æ –ª–∏–±–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    @commands.has_permissions(moderate_members = True)
    async def reduce_money(self, ctx, —Å—É–º–º–∞: int = commands.Param(description="–ö–∞–∫—É—é —Å—É–º–º—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å?"), —É—á–∞—Å—Ç–Ω–∏–∫: disnake.Member = commands.Param(description="–£–∫–∞–∂–∏—Ç–µ —É –∫–∞–∫–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –Ω–µ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –µ—Å–ª–∏ —É –≤—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞")):
        await ctx.response.defer()
        summ = 0
        with sqlite3.connect("database.db") as db:
            cursor = db.cursor()
            cursor.execute("UPDATE balances SET user_balance = user_balance - ? WHERE guild_id = ? AND user_id = ?", (—Å—É–º–º–∞, ctx.guild.id, —É—á–∞—Å—Ç–Ω–∏–∫.id))
            for guild, user, suma in cursor.execute("SELECT * FROM balances WHERE guild_id = ? AND user_id = ?", (ctx.guild.id, —É—á–∞—Å—Ç–Ω–∏–∫.id)):
                if guild == ctx.guild.id:
                    if user == —É—á–∞—Å—Ç–Ω–∏–∫.id:
                        summ = suma
        await ctx.send(embed=disnake.Embed(title=f"<:correctCheckmark:1047244074350018700> –£—Å–ø–µ—à–Ω–æ",description=f"–¢–µ–ø–µ—Ä—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {suma} <:dollar:1051974269296451684>!", color=0x228b22), delete_after = 20)

    @commands.slash_command(name="pay",description="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –∫–æ–º—É –ª–∏–±–æ.")
    async def pay(self, ctx, —É—á–∞—Å—Ç–Ω–∏–∫: disnake.Member = commands.Param(description="–ö–∞–∫–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å (command.Args.summ) –≤–∞–ª—é—Ç—ã?"), —Å—É–º–º–∞: int = commands.Param(description="–ö–∞–∫—É—é —Å—É–º–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫—É?")):
        await ctx.response.defer()
        member = —É—á–∞—Å—Ç–Ω–∏–∫
        summ = —Å—É–º–º–∞
        with sqlite3.connect("database.db") as db:
            cursor = db.cursor()
            for guild, user, balance in cursor.execute("SELECT * FROM balances WHERE user_id = ? AND guild_id = ?",(ctx.author.id, ctx.guild.id,)):
                if int(balance) < int(summ):
                    return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>–û—à–∏–±–∫–∞",description="–£ –≤–∞—Å –º–∞–ª–æ –¥–µ–Ω–µ–≥ –Ω–∞ —Å—á–µ—Ç—É",color=disnake.Color.red()), delete_after = 10)
            cursor.execute("UPDATE balances SET user_balance = user_balance - ? WHERE guild_id = ? AND user_id = ?", (summ, ctx.guild.id, ctx.author.id,))
            cursor.execute("UPDATE balances SET user_balance = user_balance + ? WHERE guild_id = ? AND user_id = ?", (summ, ctx.guild.id, member.id,))
        await ctx.send("<:correctCheckmark:1047244074350018700>", delete_after = 20)

    @commands.slash_command(name="ping",description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –±–æ—Ç–∞.")
    async def ping(self, ctx):
        await ctx.response.defer()
        ping = int(self.bot.latency * 1000)
        st = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
        col = 0xffffff
        if ping > 1:
            st = "–û—Ç–ª–∏—á–Ω–æ!"
            col = 0x00bd19
        if ping > 70:
            st = "–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ!"
            col = 0x61bd00
        if ping > 140:
            st = '–ù–æ—Ä–º–∞–ª—å–Ω–æ.'
            col = 0x9dbd00
        if ping > 210:
            st = "–ü–ª–æ—Ö–æ."
            col = 0xbdaa00
        if ping > 280:
            st = "–î–æ–≤–æ–ª—å–Ω–æ –ø–ª–æ—Ö–æ."
            col = 0xffaa00
        if ping > 350:
            st = "–û–ß–ï–ù–¨ –ü–õ–û–•–û"
            col = 0xff0000
        await ctx.send(embed=disnake.Embed(title="–ü–æ–Ω–≥!",description=f"–ú–æ—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–≤—è–∑–∏: {ping}ms\n–≠—Ç–æ {st}",color=col), delete_after = 20)

    @commands.slash_command(name="guilds-list",description="-", guild_ids=[1047126198330859580])
    async def guilds_list(self, ctx):

        if ctx.author.id == 1047108944721616916 or ctx.author.id == 848551340925517914 or ctx.author.id == 767076912023207938:
            await ctx.send(embed=disnake.Embed(title="–°–µ—Ä–≤–µ—Ä–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —è –Ω–∞—Ö–æ–∂—É—Å—å",description=f"{self.bot.guilds}"), ephemeral=True)
        else:
            await ctx.send("–ê –∫—É–¥–∞ –º—ã –ª–µ–∑–µ–º?))",ephemeral=True)

    @commands.slash_command(name="users-cash",description="-", guild_ids=[1047126198330859580])
    async def users_cash(self, ctx):
        if ctx.author.id == 1047108944721616916 or ctx.author.id == 848551340925517914 or ctx.author.id == 767076912023207938:
            print(self.bot.users)
            await ctx.send("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—ã–≤–µ–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Å–æ–ª—å.", ephemeral=True)
        else:
            await ctx.send("–ê –∫—É–¥–∞ –º—ã –ª–µ–∑–µ–º?))",ephemeral=True)

    @commands.slash_command(name="voice-clients",description="-", guild_ids=[1047126198330859580])
    async def voice_clients(self, ctx):
        if ctx.author.id == 1047108944721616916 or ctx.author.id == 848551340925517914 or ctx.author.id == 767076912023207938:
            await ctx.send(f"–°–µ–π—á–∞—Å –±–æ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ç—Ä–µ–∫–∏ –≤ {len(self.bot.voice_clients)} –∫–∞–Ω–∞–ª–∞—Ö!",ephemeral=True)
        else:
            await ctx.send("–ê –∫—É–¥–∞ –º—ã –ª–µ–∑–µ–º?))",ephemeral=True)

class Relationships(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.slash_command(name="hug",description="–û–±–Ω–∏–º–∞—à–∫–∏ —Å –¥—Ä—É–≥–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º")
    async def hug(self, ctx, —É—á–∞—Å—Ç–Ω–∏–∫: disnake.Member = commands.Param(description="–ö–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—è—Ç—å?")):
        await ctx.response.defer()
        if ctx.author.id == —É—á–∞—Å—Ç–Ω–∏–∫.id:
            return await ctx.send("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –æ–±–Ω—è—Ç—å —Å–∞–º —Å–µ–±—è.",ephemeral=True)
        request = requests.get("https://some-random-api.ml/animu/hug")
        json_load = json.loads(request.text)
        await ctx.send(embed=disnake.Embed(title=f"**{ctx.author.name}** –æ–±–Ω—è–ª **{—É—á–∞—Å—Ç–Ω–∏–∫.name}**",color=0x228b22).set_image(url=json_load["link"]))

    @commands.slash_command(name="pat",description="–ü–æ–≥–ª–∞–¥–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞")
    async def pat(self, ctx, —É—á–∞—Å—Ç–Ω–∏–∫: disnake.Member = commands.Param(description="–ö–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–≥–ª–∞–¥–∏—Ç—å? <:Magic:1047241900370956298>")):
        await ctx.response.defer()
        if ctx.author.id == —É—á–∞—Å—Ç–Ω–∏–∫.id:
            return await ctx.send("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø–æ–≥–ª–∞–¥–∏—Ç—å —Å–∞–º —Å–µ–±—è.",ephemeral=True)
        request = requests.get("https://some-random-api.ml/animu/pat")
        json_load = json.loads(request.text)
        await ctx.send(embed=disnake.Embed(title=f"**{ctx.author.name}** –≥–ª–∞–¥–∏—Ç **{—É—á–∞—Å—Ç–Ω–∏–∫.name}**",color=0x228b22).set_image(url = json_load["link"]))

class RolePlayHelps(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.slash_command(name="acc-register", description="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —Ä–ø")
    @commands.bot_has_permissions(manage_webhooks = True)
    async def acc_reg(self, ctx, –∏–º—è = commands.Param(description="–ö–∞–∫–æ–µ –∏–º—è –±—É–¥–µ—Ç —É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?")):
        await ctx.response.defer()
        channel_webhooks = await ctx.channel.webhooks()
        for webhook in channel_webhooks:
            if webhook.user == bot.user and webhook.name == –∏–º—è:
                return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>–û—à–∏–±–∫–∞",description="–¢–∞–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ —É–∂–µ –≤—Ä–æ–¥–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ?",color=disnake.Color.red()), delete_after = 20)
        try:
            webhook = await ctx.channel.create_webhook(name=–∏–º—è)
        except disnake.errors.HTTPException:
            await ctx.send(lang(ctx, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –ø—Ä–æ—Å—Ç–∏—Ç–µ..."), delete_after = 20)
        else:
            await ctx.send("<:correctCheckmark:1047244074350018700>", delete_after = 20)

    @commands.slash_command(name="acc-send",description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á—Ç–æ —Ç–æ –æ—Ç –∏–º–µ–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
    @commands.bot_has_permissions(manage_webhooks = True)
    async def acc_send(self, ctx, –∏–º—è = commands.Param(description="–ù–∞–ø–æ–º–Ω–∏—Ç–µ –º–Ω–µ –∏–º—è –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞..."), —Å–æ–æ–±—â–µ–Ω–∏–µ = commands.Param(description="–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?")):
        channel_webhooks = await ctx.channel.webhooks()
        my_webhook = None
        avatar_url = None
        for webhook in channel_webhooks:
            if webhook.user == bot.user and webhook.name == –∏–º—è:
                my_webhook = webhook
        if not my_webhook:
            return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>–û—à–∏–±–∫–∞",description="–¢–∞–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",color=disnake.Color.red()), ephemeral=True)
        try:
            try:
                avatar_url = Memory.read(f"avatars/{ctx.channel.id}{–∏–º—è}webhook.txt")
            except:
                avatar_url = None
            if not avatar_url:
                await my_webhook.send(content = —Å–æ–æ–±—â–µ–Ω–∏–µ)
            else:
                await my_webhook.send(content=—Å–æ–æ–±—â–µ–Ω–∏–µ, avatar_url=avatar_url)
        except disnake.errors.HTTPException:
            await ctx.send("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –ø—Ä–æ—Å—Ç–∏—Ç–µ...", delete_after = 20)
        else:
            await ctx.send(f"<:correctCheckmark:1047244074350018700>",ephemeral=True)

    @commands.slash_command(name="acc-update-avatar",description="–ò–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂—É")
    @commands.has_permissions(manage_webhooks = True)
    async def acc_upd_atar(self, ctx, –∏–º—è = commands.Param(description="–ö–∞–∫–æ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –º–µ–Ω—è–µ–º –∞–≤–∞—Ç–∞—Ä?")):
        await ctx.response.defer()
        channel_webhooks = await ctx.channel.webhooks()
        my_webhook = None
        for webhook in channel_webhooks:
            if webhook.user == bot.user and webhook.name == –∏–º—è:
                my_webhook = webhook
        if not my_webhook:
            return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>–û—à–∏–±–∫–∞",description="–¢–∞–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",color=disnake.Color.red()), ephemeral=True)
        await ctx.send(embed=disnake.Embed(title="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",description="–≠—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –∞–≤–∞—Ç–∞—Ä",color=0xffff00), delete_after = 20)
        status = True
        url = None
        while status:
            msg = await bot.wait_for("message")
            if msg.guild.id == ctx.guild.id:
                if msg.author.id == ctx.author.id:
                    if msg.attachments:
                        status = False
                        url = msg.attachments[0].url
                    else:
                        status = False
                        return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>–û—à–∏–±–∫–∞",description="–í—ã –Ω–µ –ø—Ä–∏–ª–æ–∂–∏–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º",color=disnake.Color.red()), delete_after = 20)
        Memory.write(f"avatars/{ctx.channel.id}{–∏–º—è}webhook.txt", url)
        await ctx.send("<:correctCheckmark:1047244074350018700>", delete_after = 20)

    @commands.slash_command(name="acc-remove",description="–£–¥–∞–ª–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
    @commands.has_permissions(manage_webhooks = True)
    @commands.bot_has_permissions(manage_webhooks = True)
    async def acc_rem(self, ctx, –∏–º—è = commands.Param(description="–ö–∞–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —É–¥–∞–ª—è–µ–º?")):
        await ctx.response.defer()
        my_webhook = None
        channel_webhooks = await ctx.channel.webhooks()
        for webhook in channel_webhooks:
            if webhook.user == bot.user and webhook.name == –∏–º—è:
                my_webhook = webhook
        if not my_webhook:
            return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>–û—à–∏–±–∫–∞",description="–¢–∞–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",color=disnake.Color.red()), delete_after = 10)
        try:
            await my_webhook.delete()
            if os.path.isfile(f"avatars/{ctx.channel.id}{–∏–º—è}webhook.txt"):
                os.remove(f"avatars/{ctx.channel.id}{–∏–º—è}webhook.txt")

        except disnake.errors.HTTPException:
            await ctx.send(lang(ctx, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –ø—Ä–æ—Å—Ç–∏—Ç–µ..."), delete_after = 20)
        else:
            await ctx.send("<:correctCheckmark:1047244074350018700>", delete_after = 20)


    @commands.slash_command(name="acc-all",description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –∫–∞–Ω–∞–ª–µ")
    async def acc_all(self, ctx):
        await ctx.response.defer()
        my_webhooks = []
        channel_webhooks = await ctx.channel.webhooks()
        for webhook in channel_webhooks:
            if webhook.user == bot.user:
                my_webhooks.append(webhook.name)

        await ctx.send(embed=disnake.Embed(title="–í—Å–µ –≤–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ",description="\n".join(list(map(str, my_webhooks))), color=0x228b22), delete_after = 20)

class Oauth:
    client_id = "1047125592220373075"
    client_secret = "qxXOHwHOJAdQApwn4LNCDWi3Gy8Dwitr"
    redirect_uri = "http://de4.bot-hosting.net:7259/save_me"
    scope = "identify%20guilds%20email"
    discord_login_url = f"https://discord.com/api/oauth2/authorize?client_id=1047125592220373075&redirect_uri=http%3A%2F%2Fde4.bot-hosting.net%3A7259%2Fsave_me&response_type=code&scope=identify%20guilds%20email"
    discord_token_url = "https://discord.com/api/oauth2/token"
    discord_api_url = "https://discord.com/api"


    @staticmethod
    def get_access_token(code):
        payload = {
            "client_id": Oauth.client_id,
            "client_secret": Oauth.client_secret,
            "grant_type": "authorization_code",
            "code": code,
            "redirect_uri": Oauth.redirect_uri,
            "scope": Oauth.scope
        }

        access_token = requests.post(url = Oauth.discord_token_url, data = payload).json()
        return access_token.get("access_token")


    @staticmethod
    def get_user_json(access_token):
        url = f"{Oauth.discord_api_url}/users/@me"
        headers = {"Authorization": f"Bearer {access_token}"}

        user_object = requests.get(url = url, headers = headers).json()
        return user_object

app = Flask(__name__)
bot.remove_command("help")
bot.add_cog(Music(bot))
bot.add_cog(Utils(bot))
bot.add_cog(Moderation(bot))
bot.add_cog(Games(bot))
bot.add_cog(Main(bot))
bot.add_cog(BotSettings(bot))
bot.add_cog(Economy(bot))
bot.add_cog(Relationships(bot))
bot.add_cog(RolePlayHelps(bot))
app.config["SECRET_KEY"] = "–¢—É–∞–ª–µ—Ç_–≤–∑–ª–æ–º–∞–µ—Ç_—Ç–µ–±—è_–Ω–æ—á—å—é_–µ—Å–ª–∏_–Ω–µ_–¥–æ–±–∞–≤–∏—à—å_–º–æ–µ–≥–æ_–±–æ—Ç–∞"

@bot.command(name="test", usage="?test <int:count>")
async def tst(ctx, count: int):
    await ctx.send(count, delete_after=5)

@bot.command(name="create-verify-interface")
async def cvi(ctx):
    if not ctx.guild.id == 1047126198330859580:
        return
    await ctx.message.delete()
    await ctx.channel.send("–ê —ç—Ç–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è <3\n–ï—Å–ª–∏ —Ç—ã –ø—Ä–æ—á–∏—Ç–∞–ª –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –≤—ã—à–µ, –∞ —Ç–∞–∫–∂–µ —Å–æ–≥–ª–∞—Å–µ–Ω —Å–æ–±–ª—é–¥–∞—Ç—å –∏—Ö, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá", components = [disnake.ui.Button(emoji="üü©", style=disnake.ButtonStyle.success, custom_id="verify")])

@bot.user_command(name="–ò–Ω—Ñ–æ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
async def infouser(ctx, member: disnake.User):
        await ctx.response.defer()
        if not member:
            member = ctx.author
        scopes = 0
        try:
            scopes = Memory.read(f"scope/{member.id}balls.txt")
        except:
            scopes = 0
        balance = 0
        users = None
        with sqlite3.connect("database.db") as db:
            cursor = db.cursor()
            for guild, user, bal in cursor.execute("SELECT * FROM balances"):
                if guild == ctx.guild.id:
                    if user == member.id:
                        users = user
                        balance = bal
        if not users:
            with sqlite3.connect("database.db") as db:
                cursor = db.cursor()
                cursor.execute("INSERT INTO balances VALUES(?, ?, ?)", (ctx.guild.id, member.id, 0))
            balance = 0
        if not balance:
            balance = 0
        t = member.status
        if t == disnake.Status.online:
            d = lang(ctx,"–í —Å–µ—Ç–∏")

        t = member.status
        if t == disnake.Status.offline:
            d = lang(ctx,"–ù–µ –≤ —Å–µ—Ç–∏")

        t = member.status
        if t == disnake.Status.idle:
            d = lang(ctx,"–ù–µ –∞–∫—Ç–∏–≤–µ–Ω")

        t = member.status
        if t == disnake.Status.dnd:
            d = lang(ctx,"–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å")

        img = Image.new('RGBA', (500, 170), '#000000')
        backgr = ["https://cdn.glitch.global/5fcfa7e8-8436-4acd-a852-e721cd1b531e/1614397342_47-p-temnii-multyashnii-fon-64.png?v=1670188383348","https://cdn.glitch.global/5fcfa7e8-8436-4acd-a852-e721cd1b531e/1622768497_26-phonoteka_org-p-noch-art-minimalizm-krasivo-28.png?v=1670188403979","https://cdn.glitch.global/5fcfa7e8-8436-4acd-a852-e721cd1b531e/i.png?v=1670188415480"]
        r = requests.get(random.choice(backgr), stream = True)
        r = Image.open(io.BytesIO(r.content))
        r = r.convert("RGBA")
        r = r.resize((500, 170))
        img.paste(r, (0, 0, 500, 170))
        url = str(member.avatar.url)
        r = requests.get(url, stream = True)
        r = Image.open(io.BytesIO(r.content))
        r = r.convert('RGBA')
        r = r.resize((100, 100))
        img.paste(r, (15, 15, 115, 115))
        idraw = ImageDraw.Draw(img)
        name = member.name
        headline = ImageFont.truetype('comfortaa.ttf', size = 25)
        undertext = ImageFont.truetype('comfortaa.ttf', size = 13)
        idraw.text((125, 15), f'{name}', font=headline, fill="#ffffff")
        idraw.text((125, 50), f'#{member.discriminator}', font=undertext, fill="#ffffff")
        idraw.text((125, 70), f'ID: \n{member.id}', font = undertext, fill="#ffffff")
        idraw.text((125, 110), f'{lang(ctx,"–°—Ç–∞—Ç—É—Å")}: {d}', font = undertext, fill="#ffffff")
        idraw.text((125, 130), f"{lang(ctx,'–ö–æ–ª-–≤–æ –æ—á–∫–æ–≤')}: {scopes}", font = undertext, fill="#ffffff")
        idraw.text((125, 150), f"{lang(ctx,'–ë–∞–ª–∞–Ω—Å')}: {int(balance)}", font=undertext, fill="#ffffff")
        idraw.text((10, 155), f'{bot.user.name} Draw\'s', font=undertext, fill="#ffffff")
        img.save('user_card.png')
        await ctx.send(file=disnake.File("user_card.png"))

@bot.user_command(name="–ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å")
async def infouser(ctx, member: disnake.User):
    await ctx.response.defer()
    sents = [f"–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –æ–±—ä—è–≤–∏–ª—Å—è {member.mention}. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –∑–∞–∫–∞–∑–∞—Ç—å –ø–∏—Ü—Ü—É –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ **{member.guild.name}**!",f"–£ –Ω–∞—Å –Ω–æ–≤–µ–Ω—å–∫–∏–π, {member.mention}, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è, –ø—É—Å–∫–∞–π —Ç–µ–±—è —É–∑–Ω–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä **{member.guild.name}**!",f"{member.mention} –ø—Ä–∏—à—ë–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –ø–æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å–æ —Å–µ—Ä–≤–µ—Ä–æ–º **{member.guild.name}**"]
    await ctx.send(lang(ctx, random.choice(sents)))

@bot.event
async def on_ready():
    await bot.change_presence(status=disnake.Status.dnd, activity=disnake.Activity(type=disnake.ActivityType.streaming, url="https://www.twitch.tv/tjma_",name=f"de4.bot-hosting.net:7259 [{len(bot.guilds)}]"))
    with sqlite3.connect("database.db") as db:
        cursor = db.cursor()

        cursor.execute("CREATE TABLE IF NOT EXISTS warns(special_id INTEGER PRIMARY KEY, guild_id INTEGER, user_id INTEGER, reason TEXT)")
        cursor.execute("CREATE TABLE IF NOT EXISTS balances(guild_id INTEGER, user_id INTEGER, user_balance INTEGER)")
        cursor.execute("CREATE TABLE IF NOT EXISTS sugestions(guild_id INTEGER, sugestion TEXT)")
        cursor.execute("CREATE TABLE IF NOT EXISTS songs(name VARCHAR, requester INTEGER, author VARCHAR, id INTEGER, albumId INTEGER, lyrics TEXT, guild INTEGER, image TEXT,position INTEGER PRIMARY KEY)")
        cursor.execute("CREATE TABLE IF NOT EXISTS langs(lang VARCHAR, guild INTEGER)")
        cursor.execute("CREATE TABLE IF NOT EXISTS userlikes(user INTEGER, trackName VARCHAR, trackId INTEGER)")

        #db.execute('SET NAMES warns;')
        #db.execute('SET CHARACTER SET balances;')
    with sqlite3.connect("db.db") as db:
        c = db.cursor()

        c.execute("CREATE TABLE IF NOT EXISTS intents(ini TEXT, outi TEXT)")
    try:
        asyncio.get_running_loop()
    except:
        print("Creating loop")
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

    print("---------------------------\n‚Ä¢–í—Å—ë –≥–æ—Ç–æ–≤–æ\n‚Ä¢–í–µ—Ä—Å–∏—è –∫–æ–¥–∞ 1.6.2\n‚Ä¢Python Engine‚Ä¢\n---------------------------")

@bot.event
async def on_guild_join(guild):
    channel = 0
    embed = disnake.Embed(title="–Ø –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å!",description="–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –º–µ–Ω—è –Ω–∞ —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä, –∏ –∑–∞ —ç—Ç–æ —è –≤–∞–º –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω\n\n\n‚ùó –Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞ slash-–∫–æ–º–∞–Ω–¥–∞—Ö, –ø—Ä–µ—Ñ–∏–∫—Å–∞ —É –º–µ–Ω—è –Ω–µ—Ç.\n\n–ß—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ –Ω–µ—Ç slash –∫–æ–º–∞–Ω–¥?\n–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–π —É –≤–∞—Å –±—ã–ª–∞ –≥–∞–ª–æ—á–∫–∞: https://media.discordapp.net/attachments/1043105245556899850/1043131358555418696/image.png?width=302&height=158\n\n\n–ï—Å–ª–∏ –µ—ë –Ω–µ –±—ã–ª–æ, —É–¥–∞–ª–∏—Ç–µ –º–µ–Ω—è –∏ –¥–æ–±–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ\n\n\n\n–ú–æ–π —Å–µ—Ä–≤–µ—Ä –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é, —Å–ø—Ä–æ—Å–∏—Ç—å —á—Ç–æ –ª–∏–±–æ - ||https://discord.gg/NgKCsFbGty||\n\nüíú –ú—ã –∂–µ–ª–∞–µ–º –≤–∞–º –¥–æ–±—Ä–∞ –∏ —É–¥–∞—á–∏ üíú",color=0x228b22)
    success = True
    chann = None
    while success:
        try:
            chann = guild.text_channels[channel]
            await chann.send(embed=embed)
            success = False
        except:
            channel = channel + 1
            if channel > 60: success = False
    await bot.change_presence(status=disnake.Status.dnd, activity=disnake.Activity(type=disnake.ActivityType.streaming, url="https://www.twitch.tv/tjma_",name=f"de4.bot-hosting.net:7259 [{len(bot.guilds)}]"))

@bot.event
async def on_guild_remove(guild):
    await bot.change_presence(status=disnake.Status.dnd, activity=disnake.Activity(type=disnake.ActivityType.streaming, url="https://www.twitch.tv/tjma_",name=f"de4.bot-hosting.net:7259 [{len(bot.guilds)}]"))


@bot.event
async def on_slash_command_error(ctx, error):
    if isinstance(error, commands.CommandOnCooldown):
        await ctx.send(f'–ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ {round(error.retry_after, 2)} —Å–µ–∫—É–Ω–¥.',ephemeral=True)
    elif isinstance(error, commands.MissingPermissions):
        await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>–û—à–∏–±–∫–∞",description="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.",color=disnake.Color.red()),ephemeral=True)
    elif isinstance(error, commands.BotMissingPermissions):
        await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>–û—à–∏–±–∫–∞",description="–£ –º–µ–Ω—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.",color=disnake.Color.red()), ephemeral=True)
    elif isinstance(error, commands.errors.NSFWChannelRequired):
        await ctx.send("<:wrongCheckmark:1047244133078675607> –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É, –Ω–æ —Ç–æ–ª—å–∫–æ –≤ nsfw –∫–∞–Ω–∞–ª–µ!")
    else:
        print(error)

@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.errors.MissingRequiredArgument):
        await ctx.send(embed=disnake.Embed(title="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:",description=f"```{ctx.command.usage}```\n–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–∞–∫–æ–π —Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç.",color=disnake.Color.red()), delete_after=15)
    elif isinstance(error, commands.errors.BadArgument):
        await ctx.send(embed=disnake.Embed(title="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:",description=f"```{ctx.command.usage}```\n–í—ã —É–∫–∞–∑–∞–ª–∏ –∫–∞–∫–æ–π —Ç–æ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.",color=disnake.Color.red()), delete_after=15)
    else:
        print(error)


@bot.event
async def on_member_join(member):
    channel_id = 0
    try:
        channel_id = Memory.read(f"channels/{member.guild.id}welcomechannel.txt")
    except:
        channel_id = 0
        return
    request = requests.get(f"https://some-random-api.ml/canvas/misc/namecard?avatar={member.avatar.url}&username={member.name}&birthday=-.-&description=–∑–∞—à—ë–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä {member.guild.name}!")
    channel = bot.get_channel(int(channel_id))
    messages = [f"–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –æ–±—ä—è–≤–∏–ª—Å—è {member.mention}. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –∑–∞–∫–∞–∑–∞—Ç—å –ø–∏—Ü—Ü—É –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ **{member.guild.name}**!",f"–£ –Ω–∞—Å –Ω–æ–≤–µ–Ω—å–∫–∏–π, {member.mention}, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è, –ø—É—Å–∫–∞–π —Ç–µ–±—è —É–∑–Ω–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä **{member.guild.name}**!",f"{member.mention} –ø—Ä–∏—à—ë–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –ø–æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å–æ —Å–µ—Ä–≤–µ—Ä–æ–º **{member.guild.name}**"]
    await channel.send(embed=disnake.Embed(description=random.choice(messages),color=0x228b22).set_image(url=request.url))

@bot.event
async def on_member_leave(member):
    channel_id = 0
    try:
        channel_id = Memory.read(f"channels/{member.guild.id}byechannel.txt")
    except:
        channel_id = 0
        return
    request = requests.get(f"https://some-random-api.ml/canvas/misc/namecard?avatar={member.avatar.url}&username={member.name}&birthday=-.-&description=–ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä {member.guild.name}...")
    channel = bot.get_channel(int(channel_id))
    messages = [f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member.mention}, –ø–∏—Ü—Ü—É —Ç–∞–∫ –∏ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª...",f"{member.mention} –ø–æ–∫–∏–Ω—É–ª –Ω–∞—Å!",f"{member.mention} —É—à—ë–ª –æ—Ç –Ω–∞—Å..."]
    await channel.send(embed=disnake.Embed(description=random.choice(messages),color=0x228b22).set_image(url=request.url))

@bot.event
async def on_member_remove(member):
    channel_id = 0
    try:
        channel_id = Memory.read(f"channels/{member.guild.id}byechannel.txt")
    except:
        channel_id = 0
        return
    request = requests.get(f"https://some-random-api.ml/canvas/misc/namecard?avatar={member.avatar.url}&username={member.name}&birthday=-.-&description=–ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä {member.guild.name}...")
    channel = bot.get_channel(int(channel_id))
    messages = [f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member.mention}, –ø–∏—Ü—Ü—É —Ç–∞–∫ –∏ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª...",f"{member.mention} –ø–æ–∫–∏–Ω—É–ª –Ω–∞—Å!",f"{member.mention} —É—à—ë–ª –æ—Ç –Ω–∞—Å..."]
    await channel.send(embed=disnake.Embed(description=random.choice(messages),color=0x228b22).set_image(url=request.url))

@bot.event
async def on_button_click(ctx):
    ki = ctx.component.custom_id
    if ki == "next":
        try:
            error = await Song().skip(ctx)
        except AttributeError:
            pass
        if error == "notState": return await ctx.send("<:wrongCheckmark:1047244133078675607>–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!",ephemeral=True)
        await ctx.response.defer()
    elif ki == "stop":
        error = await Song().stop(ctx)
        if error == "notState": return await ctx.send("<:wrongCheckmark:1047244133078675607>–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!",ephemeral=True)
        await ctx.response.defer()
    elif ki == "replay":
        voice_state = ctx.guild.voice_client
        if voice_state and voice_state.is_playing():
            await Song().replay(ctx)
        else:
            await ctx.send("<:wrongCheckmark:1047244133078675607>–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!",ephemeral=True)
    elif ki == "pause":
        voice_state = ctx.guild.voice_client
        if voice_state and voice_state.is_playing():
            Song().pause(ctx.guild)
        elif voice_state and not voice_state.is_playing():
            Song().resume(ctx.guild)
        else:
           await ctx.send("<:wrongCheckmark:1047244133078675607>–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!",ephemeral=True)
        await ctx.response.defer()
    elif ki == "text":
        lyrics = Song().lyrics(ctx)
        if not lyrics['lyrics']: return await ctx.send(embed=disnake.Embed(title=f"<:wrongCheckmark:1047244133078675607>{lang(ctx,'–û—à–∏–±–∫–∞')}",description=lang(ctx,"–¢–µ–∫—Å—Ç —ç—Ç–æ–π –ø–µ—Å–Ω–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"),color=disnake.Color.red()))
        await ctx.send(embed=disnake.Embed(title=f"üîç {lang(ctx,'–¢–µ–∫—Å—Ç –æ—Ç —Ç—Ä–µ–∫–∞')} **{lyrics['name']}**",description=lyrics["lyrics"]))
    elif ki == "verify":
        await ctx.author.add_roles(ctx.guild.get_role(1072833325661700096))
        await ctx.send("–¢—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.", ephemeral=True)

@bot.event
async def on_message(msg):
    if msg.author.bot:
        return
    #return await msg.reply(embed=disnake.Embed(title="<:wrongCheckmark:1047244133078675607>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",description="–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–π",color=disnake.Color.red()))
    await bot.process_commands(msg)
    if bot.user.mentioned_in(msg): #–µ—Å–ª–∏ –±–æ—Ç —É–ø–æ–º—è–Ω—É—Ç
        await msg.reply(await chat.get_receive_async(msg.content))


    content = msg.content.lower()
    for_check = content.translate(str.maketrans('', '', string.punctuation))
    bad_words = ["—Å—É–∫–∞","—ë–±–∞–Ω—ã–π","–±–ª—è—Ç—å","–ø–∏–¥–æ—Ä","–ø–∏–¥–æ—Ä–∞","–±–ª—è","–µ–±–∞—Ç—å","–Ω–∞—Ö—É–π","—Ö—É–π","–∑–∞–µ–±–∞–ª","–∑–∞–µ–±–∏—Å—å","–∞—Ö—É–µ–Ω–Ω–æ","–∞—Ö—É–µ–Ω–æ","–ø–∏–∑–¥—é–∫","–Ω–∞—Ö—É—è","—Ö—É–π–Ω—è","—ë–±–∞–Ω—ã–π","–µ–±–∞–Ω—ã–π","–ª–æ—à–∞—Ä–∞","–ª–æ—Ö","–ø–∏–∑–¥–µ—Ü","–ø–∑–¥—Ü","–ø–∏–∑–¥–∞","–ø–µ–¥–∏–∫","–∫–∞–Ω–∞–≤–µ","–º—É–¥–∏–ª–∞","–º—É–¥–∞–∫","–∫–æ–Ω—á–µ–Ω–Ω—ã–π","–∫–æ–Ω—á–µ–Ω—ã–π","–∫–æ–Ω—á–∞—é","–∫–æ–Ω—á–∞","—à–ª—é—Ö–∞","–≥–µ–π","–ª–µ—Å–±–∏","–ª–µ—Å–±–∏—è–Ω–∫–∞","—Ç—Ä–∞—Ö","—Ç—Ä–∞—Ö–∞—Ç—å—Å—è","—Å–æ—Å–∞—Ç—å—Å—è","–µ–±–∞—Ç—å—Å—è","–¥–æ—ë–±—ã–≤–∞—Ç—å—Å—è","–∑–∞–ª—É–ø–∞","—Ö—É—è","–±–ª—è–¥–∏–Ω–∞","–≥–∞–≤–Ω–æ–∑–∞–ª—É–ø–∞","–ø–µ–Ω–∏—Å","—Ä—É–∫–æ–∂–æ–ø","—Ö—É—è—Ä–∏—â–µ","–±–æ–¥–∞–Ω–∏—â–µ","–µ–±–ª–∞–Ω–∏—â–µ","–µ–±–∞–ª","—Ö—É–π–ª–æ","–µ–±–ª–∞–Ω","–µ–±–∞–ª–æ","–µ–±–∞–ª—å–Ω–∏–∫","–µ–±–∞–Ω–Ω—ã–π","—Ö–µ—Ä–Ω—è","–ø–æ—Ö—É–π","–∞—Ö—É–µ–Ω–Ω–∞"]
    words_content = for_check.split()
    try:
        Memory.read(f"badwords/{msg.guild.id}.txt")
    except:
        pass
    else:
        if msg.author.id == 966494653375475762 or msg.author.id == 1047108944721616916 or msg.author.id == 1014167436481806346:
            pass
        else:
            for word in words_content:
                if word in bad_words:
                    member = msg.author
                    reason = "–ê–≤—Ç–æ–º–æ–¥: –ü–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞"
                    with sqlite3.connect("database.db") as db:
                        cursor = db.cursor()
                        cursor.execute("INSERT INTO warns(guild_id, user_id, reason) VALUES(?, ?, ?)", (msg.guild.id, member.id, reason))
                    try:
                        await msg.delete()
                    except:
                        pass
                    finally:
                        await msg.channel.send(f"<:policePanda:1047242230651437077> {msg.author.mention} –ù–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ –∑–∞–ø—Ä–µ—â–µ–Ω—ã –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞! –í–∞–º –≤—ã–Ω–µ—Å–µ–Ω –≤–∞—Ä–Ω –≤ –≤–∏–¥–µ –Ω–∞–∫–∞–∑–∞–Ω–∏—è.")
    webhooks = None
    try:
        webhooks = await msg.channel.webhooks()
    except:
        pass
    else:
        for webhook in webhooks:
            if webhook.user == bot.user:
                if msg.content.startswith(webhook.name):
                    try:
                        url = None
                        try:
                            url = Memory.read(f"avatars/{msg.channel.id}{webhook.name}webhook.txt")
                        except:
                            await webhook.send(content = msg.content[len(webhook.name) + 1:])
                            await msg.delete()
                        else:
                            await webhook.send(content = msg.content[len(webhook.name) + 1:], avatar_url=url)
                            await msg.delete()
                    except disnake.errors.HTTPException:
                        pass

async def get_stats():
    return {"servers": len(bot.guilds), "shards": 0, "users": len(bot.users)}


async def on_success_posting():
    print("stats posting successfully")

boticord_client = BoticordClient("9d37e475-5e30-401d-a7f9-c4e2ffe75e7a", version=2)
autopost = (
    boticord_client.autopost()
    .init_stats(get_stats)
    .on_success(on_success_posting)
    .start()
)

@app.route("/")
def index():
    if "id" in session:
        usr_id = session.get("id")
        user = bot.get_user(int(usr_id))
        return render_template("index.html",bot_name=bot.user.name,servers=len(bot.guilds),users=len(bot.users),user=user)
    else:
        return render_template("index.html",bot_name=bot.user.name,servers=len(bot.guilds),users=len(bot.users),user=None)

@app.route("/login")
def log_in():
    if not "id" in session:
        return redirect("https://discord.com/api/oauth2/authorize?client_id=1047125592220373075&redirect_uri=http%3A%2F%2Fde4.bot-hosting.net%3A7259%2Fsave_me&response_type=code&scope=identify%20guilds%20email")
    else:
        return redirect(url_for("profile"))

@app.route("/save_me")
def save_me():
    code = flask.request.args.get("code")
    at = Oauth.get_access_token(code)

    user = Oauth.get_user_json(at)
    session["id"] = user.get("id")
    return redirect("http://de4.bot-hosting.net:7259/profile")

@app.route("/profile")
def profile():
    if not "id" in session:
        return redirect("https://discord.com/api/oauth2/authorize?client_id=1047125592220373075&redirect_uri=http%3A%2F%2Fde4.bot-hosting.net%3A7259%2Fsave_me&response_type=code&scope=identify%20guilds%20email")
    uid = session.get("id")
    user = bot.get_user(int(uid))
    scopes = 0
    try:
        scopes = Memory.read(f"scope/{uid}balls.txt")
    except:
        scopes = 0
    return render_template("profile.html", user=user, bot=bot, scope_count=scopes)

@app.route("/dashboard")
def dashboard():
    if not "id" in session:
        return redirect("https://discord.com/api/oauth2/authorize?client_id=1047125592220373075&redirect_uri=http%3A%2F%2Fde4.bot-hosting.net%3A7259%2Fsave_me&response_type=code&scope=identify%20guilds%20email")
    uid = session.get("id")
    user = bot.get_user(int(uid))
    user_guilds = []
    for guild in bot.guilds:
        if guild.owner_id == user.id:
            user_guilds.append(guild)
    return render_template("guilds.html", guilds=user_guilds)

@app.route("/dashboard/<int:guild>", methods = ["get","post"])
def dash(guild):
    if not "id" in session:
        return redirect("https://discord.com/api/oauth2/authorize?client_id=1047125592220373075&redirect_uri=http%3A%2F%2Fde4.bot-hosting.net%3A7259%2Fsave_me&response_type=code&scope=identify%20guilds%20email")
    uid = session.get("id")
    user = bot.get_user(int(uid))
    server = bot.get_guild(int(guild))
    if flask.request.method == "GET":
        if not server:
            return redirect(url_for("dashboard"))
        if not server.owner_id == user.id:
            return redirect(url_for("dashboard"))
        return render_template("dashboard.html", guild=server, text_count=len(server.text_channels), voice_count=len(server.voice_channels))

@app.route("/dashboard/welcome/<int:guild>", methods = ["get","post"])
def welcome_messages(guild):
    if not "id" in session:
        return redirect("https://discord.com/api/oauth2/authorize?client_id=1047125592220373075&redirect_uri=http%3A%2F%2Fde4.bot-hosting.net%3A7259%2Fsave_me&response_type=code&scope=identify%20guilds%20email")
    uid = session.get("id")
    user = bot.get_user(int(uid))
    server = bot.get_guild(int(guild))
    if flask.request.method == "GET":
        if not server:
            return redirect(url_for("dashboard"))
        if not server.owner_id == user.id:
            return redirect(url_for("dashboard"))
        return render_template("welcome_messages.html", guild=server)
    else:
        welc = flask.request.form.get("welcome")
        bye = flask.request.form.get("bye")
        if welc == "None":
            if os.path.isfile(f"channels/{server.id}welcomechannel.txt"):
                os.remove(f"channels/{server.id}welcomechannel.txt")
        else:
            Memory.write(f"channels/{server.id}welcomechannel.txt", int(welc))

        if bye == "None":
            if os.path.isfile(f"channels/{server.id}byechannel.txt"):
                os.remove(f"channels/{server.id}byechannel.txt")
        else:
            Memory.write(f"channels/{server.id}byechannel.txt", int(bye))
        return render_template("welcome_messages.html", guild=server)

@app.route("/dashboard/music/<int:guild>")
def music_queue(guild):
    if not "id" in session:
        return redirect("https://discord.com/api/oauth2/authorize?client_id=1047125592220373075&redirect_uri=http%3A%2F%2Fde4.bot-hosting.net%3A7259%2Fsave_me&response_type=code&scope=identify%20guilds%20email")
    uid = session.get("id")
    user = bot.get_user(int(uid))
    server = bot.get_guild(int(guild))
    if not server:
        return redirect(url_for("dashboard"))
    if not server.owner_id == user.id:
        return redirect(url_for("dashboard"))
    if server.voice_client and server.voice_client.is_playing():
        pass
    else:
        return render_template("music_queue.html", guild=server, guild_queue_text=[],track_title="–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!")
    trak = Song.now_playing(server)
    queue = Song.parse_queue(server)
    return render_template("music_queue.html", guild=server, guild_queue_text=queue["texts"],track_title=trak["name"], track_url=trak["uri"],track_artist=trak["artist"],requester=trak["requester"],track_pos=trak["pos"])

def run_flask():
    app.run(host="0.0.0.0", port=7259)

Thread(target=run_flask).start()
bot.run("–ü–∏—Å—å–∫–∞ –±–æ–±—Ä–∞") # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
